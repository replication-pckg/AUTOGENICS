Quartile,Id,Extracted Code,Code with Inline Comments,Accurayc,Adequacy,Conciseness,Usefulness
Q1,38120678,"com.ibm.xml.xlxp2.scan.util.SymbolMap.maxSymbolCount=64000
","```java
// Set the maximum number of symbols (i.e., variables) that the XLXP2 scanner can handle.
com.ibm.xml.xlxp2.scan.util.SymbolMap.maxSymbolCount = 64000;
```",5,4,5,3
,24662737,"string.substring(2, 2);
","string.substring(2, 2); // Returns an empty substring starting from index 2 (inclusive) to index 2 (exclusive)",5,4,5,4
,64941952,"VerifyUserFactorResponse verifyUserFactorResponse = factor.verify(verifyFactorRequest,null,null,null,null,null);
","VerifyUserFactorResponse verifyUserFactorResponse = factor.verify(verifyFactorRequest, //Verifies the factor using the specified request.
null,                                                  //Additional context about the verification, if available.
null,                                                  //Device info associated with the verification.
null,                                                  //Session id associated with the verification.
null,                                                  //Id token associated with the verification.
null);                                                  //Additional custom data associated with the verification.",5,4,4,4
,13293510,"urlConnection.setRequestProperty(""connection"", ""close"");
","urlConnection.setRequestProperty(""connection"", ""close""); // Sets the ""connection"" request header to ""close"" to indicate that the connection should be closed after this request is complete",5,5,4,4
,2916515,"import net.customware.gwt.presenter.client.place.PlaceManager
","import net.customware.gwt.presenter.client.place.PlaceManager; //import the PlaceManager class

//create an instance of the PlaceManager
PlaceManager placeManager = new PlaceManager(this, historyMapper);",5,5,5,4
,62148266,"person_photo= (ImageView)findViewById(R.id.person_photo_id);
",person_photo = (ImageView) findViewById(R.id.person_photo_id); // Cast the findViewById return value to ImageView,4,5,5,4
,10444722,"JEditorPane editorPane = new JEditorPane();
editorPane.setPage(new URL(""http://www.google.com""));
","```java
JEditorPane editorPane = new JEditorPane(); // Creates a new JEditorPane object
editorPane.setPage(new URL(""http://www.google.com"")); // Sets the URL for the JEditorPane object
```",5,4,5,3
,13488958,"facebook.authorize(a, new String[] { }, **Facebook.FORCE_DIALOG_AUTH**, new DialogListener() {
...
","```java
facebook.authorize(a, new String[] { }, Facebook.FORCE_DIALOG_AUTH, new DialogListener() {
    // Use Facebook's built-in dialog for authentication
    // Simply press ""OK"" to allow
});
```",4,3,3,3
,7372536,"angle = Math.atan2((double)(y2-y1), (double)(x2-x1));
","angle = Math.atan2((double)(y2 - y1), (double)(x2 - x1)); // Calculate the angle between the two points using the atan2 function",4,3,3,3
,64199628,"GoogleCredential.fromStream(source).createScoped(scopes)
","GoogleCredential.fromStream(source) // Loads the credential from the stream provided
        .createScoped(scopes) // Creates a new credential scoped to the specified scopes",5,5,4,5
,55685471,"style.setFillForegroundColor(new XSSFColor(new java.awt.Color(128, 0, 128), null));
","style.setFillForegroundColor(
    new XSSFColor( // Creates a new XSSFColor object
        new java.awt.Color(128, 0, 128), // Sets the RGB color values (128 red, 0 green, 128 blue)
        null // No tint or shade is applied
    )
);",5,4,5,3
,38725952,"list = new ArrayList<String>(new LinkedHashSet<String>(list))
","```java
List<String> list = new ArrayList<>(new LinkedHashSet<>(list)); // Remove duplicates and preserve insertion order
```",5,4,5,4
,36903692,"moveSpeed= baseSpeed * delta;
",moveSpeed = baseSpeed * delta; // Calculate the speed of the movement based on the base speed and elapsed time (time interval),5,4,4,4
,42908519,"FastReportBuilder drb = new FastReportBuilder();
frb.setPrintColumnNames(false);
","FastReportBuilder drb = new FastReportBuilder(); // Create a FastReportBuilder instance
drb.setPrintColumnNames(false); // Set the printColumnNames property to false, indicating that column names should not be printed in the report",5,5,4,5
,25479284,"Integer first = Integer.parseInt(in.readLine());
","```java
Integer first = Integer.parseInt(in.readLine()); // Parse the first line of input as an integer
```",5,3,5,3
,11683644,"canvas.drawBitmap(b, (w - b.width()) / 2, (h - b.height()) / 2, mPaint);
","canvas.drawBitmap(b, (w - b.width()) / 2, (h - b.height()) / 2, mPaint); // Draw the bitmap at the center of the canvas",5,4,4,4
,4302659,"ArrayList accounts = new ArrayList();
","```java
// Initialize an ArrayList to store accounts
ArrayList accounts = new ArrayList();
```",5,3,4,3
,20551044,"customSequences.set(connectedClients.indexOf(client), newSequence);
","```java
customSequences.set(// Set the custom sequence number at index of connected client
    connectedClients.indexOf(client), 
    newSequence);
```",5,4,5,3
,13274952,"arrayAdapter = new ArrayAdapter<Device>(this, android.R.layout.simple_list_item_1, deviceList);
","arrayAdapter = new ArrayAdapter<Device>(this, android.R.layout.simple_list_item_1, deviceList); // Instantiate an adapter to convert data to views",5,3,4,3
,37256503,"in.readList(mList, AnotherCustomObject.getClass().getClassLoader());
","```java
// Read the list from the input stream
in.readList(mList, AnotherCustomObject.getClass().getClassLoader());
```",5,4,3,3
,56559412,"var workbook = new SXSSFWorkbook();
workbook.getXSSFWorkbook().getCTWorkbook().getWorkbookPr().setDate1904(true);
","```java
// Instantiate an SXSSFWorkbook, a streaming version of XSSFWorkbook
var workbook = new SXSSFWorkbook();

// Get the underlying XSSFWorkbook from SXSSFWorkbook
// Set the date system for the workbook as 1904
workbook.getXSSFWorkbook().getCTWorkbook().getWorkbookPr().setDate1904(true);
```",5,5,5,4
,25280377,"JasperPrint filledReport = JasperFillManager.fillReport(""report.jrxml"", params);
JasperExportManager.exportReportToPdfFile(filledReport, ""report.pdf"");
","```java
JasperPrint filledReport = JasperFillManager.fillReport(""report.jrxml"", params); // Fills the report with data
JasperExportManager.exportReportToPdfFile(filledReport, ""report.pdf""); // Exports the filled report to a PDF file
```",5,4,4,3
,55405426,"
SQLContext sqlContext = new SQLContext(jsc.sparkContext());
",SQLContext sqlContext = new SQLContext(jsc.sparkContext()); // Create a SQLContext object to enable SQL queries on Spark DataFrames,4,3,4,3
,25025347,"(""00000"" + numberAsString).substring(numberAsString.length())
","(""00000"" + numberAsString).substring(numberAsString.length()) //Extract the last five digits of numberAsString",5,5,4,4
,33164507,"list.add(textFieldRun1Score1.getText());
",list.add(textFieldRun1Score1.getText()); // add the score from the first run text field to the list,5,4,4,5
,54968549,"@RunWith(SpringRunner.class)
@SpringBootTest(classes = WhatAreWeEatingApp.class)
","@RunWith(SpringRunner.class) // Use SpringRunner as the test runner
@SpringBootTest(classes = WhatAreWeEatingApp.class) // Start the Spring application context with WhatAreWeEatingApp as a configuration class",5,5,3,3
,22930736,"@TransactionConfiguration(defaultRollback = true)
",@TransactionConfiguration(defaultRollback = true) // Sets default rollback behavior to true for all test methods within this class,4,4,5,5
,11212529,"Integer elem = MyConverter.<ArrayList<Integer>>convert(ar, ""java.util.ArrayList<Integer>"");
","Integer elem = MyConverter.<ArrayList<Integer>>convert(ar, ""java.util.ArrayList<Integer>""); // Convert the arraylist to an ArrayList of Integer",5,4,5,5
,8631645,"final Pattern check = Pattern.compile(""^[-a-z0-9A-Z!$%*()_\\[\\]{};:@#<>,./?\\\\|]+$"");
","final Pattern check = // compiles a regular expression pattern to match a string
                        Pattern.compile(""^[-a-z0-9A-Z!$%*()_\\[\\]{};:@#<>,./?\\\\|]+$"");",4,4,4,4
,20548208,"DefaultTableModel model  = (DefaultTableModel)myTable.getModel();
model.addRow({ ""ccc"" , ""ccc"", ""ccc"" , ""ccc""} );
","```java
// Get the model from the table
DefaultTableModel model  = (DefaultTableModel)myTable.getModel();

// Add a row to the model
model.addRow({ ""ccc"" , ""ccc"", ""ccc"" , ""ccc""} );
```",5,4,4,3
,54934514,"public class MainActivity extends AppCompatActivity {
","```java
public class MainActivity extends AppCompatActivity { // Main Activity class that extends AppCompatActivity

    @Override
    protected void onCreate(Bundle savedInstanceState) { // onCreate method that is executed when the activity is created
        super.onCreate(savedInstanceState); // Calls the onCreate method of the superclass - AppCompatActivity

        setContentView(R.layout.activity_main); // Sets the layout of the activity to activity_main.xml

        Toolbar toolbar = findViewById(R.id.toolbar); // Finds the Toolbar view with id toolbar from the layout
        setSupportActionBar(toolbar); // Sets the toolbar as the action bar for the activity
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) { // onCreateOptionsMenu method that is called when the options menu is created
        getMenuInflater().inflate(R.menu.menu_main, menu); // Inflates the menu with items from menu_main.xml
        return true; // Returns true to display the menu
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) { // onOptionsItemSelected method that is called when an options menu item is selected
        int id = item.getItemId(); // Gets the id of the selected item
        if (id == R.id.action_settings) { // Checks if the selected item is action_settings
            // Handle action settings click
            return true; // Returns true to indicate that the item has been handled
        }
        return super.onOptionsItemSelected(item); // Calls the onOptionsItemSelected method of the superclass if the selected item is not action_settings
    }
}
```",5,4,5,3
,22832330,"String selectQuery = ""SELECT productid FROM "" + TABLE_PRODUCT 
      + "" WHERE "" + KEY_PRODUCTNAME +"" ='"" + productName  +""'"";
","String selectQuery = ""SELECT productid FROM "" + TABLE_PRODUCT 
      + "" WHERE "" + KEY_PRODUCTNAME +"" ='"" + productName  +""'""; // Constructs a SQL query to select the 'productid' column from the 'TABLE_PRODUCT' table, where the 'KEY_PRODUCTNAME' column is equal to 'productName'.",5,5,5,4
,23331009,"    static int charAttackTotal = charAttackBase + charAttackMod;
","```java
// Calculate the character's total attack power
static int charAttackTotal = charAttackBase + charAttackMod;
```",3,3,5,4
,19246440,"Integer quarter = (int) Math.ceil((new LocalDate(2013,9,10).getMonthOfYear() - 1) / 3) + 1;
","Integer quarter = (int) // Cast to int to get the actual quarter number
                Math.ceil((new LocalDate(2013,9,10) // Create a LocalDate object for September 10, 2013
                .getMonthOfYear() // Get the month of the year (1-12)
                - 1) // Adjust the month to be 0-based
                / 3) // Divide by 3 to get the quarter number (1-4)
                + 1; // Add 1 to get the actual quarter number (1-4)",4,3,4,4
,37493687,"Picture myPicture = new Picture(""input-file-name.jpg"");
myPicture.write(""name-for-new-file.jpg"");
","Picture myPicture = new Picture(""input-file-name.jpg""); // Create a Picture object from the specified input file
myPicture.write(""name-for-new-file.jpg""); // Write the Picture object to a new file with the specified name",5,4,5,4
,4591206,"a.divide(b, 2, RoundingMode.HALF_UP)
","```java
int a = 10;
int b = 2;
a.divide(b, 2, RoundingMode.HALF_UP); // Divides a by b with a scale of 2 and rounding up to the nearest integer
```",5,3,4,4
,9174268,"String dump = ReflectionToStringBuilder.toString(object);
",String dump = ReflectionToStringBuilder.toString(object); // Using ReflectionToStringBuilder to convert the object to a string representation,5,5,4,4
,59988410,"View view = findViewById(R.id.ScrollView01);
",View view = findViewById(R.id.ScrollView01); // Finds the view with the specified ID in the current layout,5,5,5,5
,43969591,"float rectRight = faces[i].x + faces[i].width;
float rectBottom = faces[i].y + faces[i].height;
","float rectRight = faces[i].x + faces[i].width; // Calculate the right edge of the face rectangle
float rectBottom = faces[i].y + faces[i].height; // Calculate the bottom edge of the face rectangle",5,5,5,5
,5765511,"Hashtable<String, String> cityRating = new Hashtable<String, String>();
","Hashtable<String, String> cityRating = new Hashtable<String, String>(); // Initializing a new hashtable with City as Key(String) and its Rating as Value(String)",5,4,4,4
,12171473,"map.keySet().remove(obj);
","```java
// Remove an object from the map based on its key
map.keySet().remove(obj);
```",4,3,4,4
,57270846,"Object[] objects = strings; 
","```java
Object[] objects = strings; // Array of objects holding the strings
```",5,2,3,3
,16406924,"v.add(0, v.remove(v.indexOf(""special"")));  
v.add(0, v.remove(v.indexOf(""exchange"")));
","```java
Vector<String> v = new Vector<>();
v.add(""special"");
v.add(""exchange"");

// Adds ""special"" to the beginning of the vector
v.add(0, v.remove(v.indexOf(""special"")));  

// Adds ""exchange"" to the beginning of the vector
v.add(0, v.remove(v.indexOf(""exchange"")));
```",5,4,4,3
,2280133,"myInstance = (myInstanceClass) Session.merge(myInstance);
",myInstance = (myInstanceClass) Session.merge(myInstance); // Merge the instance with the database and return the merged instance,4,4,5,3
,27735778,"SharedPreferences dataSaved = context.getSharedPreferences(""prefs"",  Context.MODE_PRIVATE);
 boolean isUser = dataSaved.getBoolean(""User"", false);
","SharedPreferences dataSaved = context.getSharedPreferences(""prefs"",  Context.MODE_PRIVATE); // get the SharedPreferences object with key named ""prefs"" in the private mode

boolean isUser = dataSaved.getBoolean(""User"", false); // retrieve the boolean value associated with the key ""User"" from the SharedPreferences, or false if not found",5,5,5,4
,65693705,"private MutableLiveData<List<Person>> currentList = new MutableLiveData<>();
",private MutableLiveData<List<Person>> currentList = new MutableLiveData<>(); // This is a MutableLiveData object that holds a list of Person objects.,5,4,4,3
,39232832,"viewPager.setOffscreenPageLimit(3);
",viewPager.setOffscreenPageLimit(3); // Sets the number of pages that should be kept in memory to three.,4,4,4,4
,31756009,"public final native String  _getId()/*-{ return ''+this.id; }-*/;
","```java
public final native String _getId()/*-{ return ''+this.id; }-*/;
```",5,4,4,3
,17492459,"JTextArea get = new JTextArea();
get = new JTextArea(""**NO MATCH FOUND**"", 20, 50);
","JTextArea get = new JTextArea(); // Create a new JTextArea object
get = new JTextArea(""**NO MATCH FOUND**"", 20, 50); // Initialize the JTextArea with the text ""NO MATCH FOUND"" and set its dimensions to 20 rows and 50 columns",5,5,4,4
,35044945," QuoteSpan[] spans = text.getSpans(0, text.length(), QuoteSpan.class);
text.setSpan(YOUR_SPAN, text.getSpanStart(spans[0]), text.getSpanEnd(spans[0]), 0);
","QuoteSpan[] spans = text.getSpans(0, text.length(), QuoteSpan.class); // Get all QuoteSpans in the text
text.setSpan(YOUR_SPAN, text.getSpanStart(spans[0]), text.getSpanEnd(spans[0]), 0); // Set YOUR_SPAN to the same range as the first QuoteSpan",5,4,5,4
,,,,,,,
,,,,,,,
Q2,49626194,"String[] myArray = getResources().getStringArray(R.array.array);
List<String> mList = Arrays.asList(myArray );
if(mList .contains(""your_value"")){
   System.out.println(""String Exists"");
}
","String[] myArray = getResources().getStringArray(R.array.array); //Gets the string array from the resources
List<String> mList = Arrays.asList(myArray ); //Converts the string array to a list
if(mList .contains(""your_value"")){ //Checks if the list contains the specified string
   System.out.println(""String Exists""); //Prints ""String Exists"" if the string is found
}",4,5,5,5
,31373854,"do {
        System.out.println(""Enter a number greater than 1."");
        n = s.nextInt();
    }
while(n > 1); 
","do {
        // Prompt the user to enter a number
        System.out.println(""Enter a number greater than 1."");
        // Read the user input
        n = s.nextInt();
    } // The loop continues until the entered number is less than or equal to 1
    while(n > 1);",5,4,5,5
,44833505,"int screenX = (int) Math.round(objX);
int screenY = (int) Math.round(objY);

","int screenX = (int) Math.round(objX); // Compute the integer screen X coordinate by rounding the object's X coordinate
int screenY = (int) Math.round(objY); // Compute the integer screen Y coordinate by rounding the object's Y coordinate",4,4,5,5
,9530699,"for(Dog d : kennel) {
    d.bark();
}
","for(Dog d : kennel) { // Iterate through the 'kennel' collection of Dog objects
    d.bark(); // Call the 'bark' method on each Dog object
}",5,4,4,4
,65499547,"@MessageExceptionHandler
public Mono<ResponseEntity<String>> exception(final Exception exception) 
{
    return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                    .body(exception.getMessage()));
}
","@MessageExceptionHandler // This annotation is used to handle exceptions thrown by the annotated method.
public Mono<ResponseEntity<String>> exception(final Exception exception) // This method handles exceptions thrown by the annotated method.
{
    // This line returns a Mono that contains a ResponseEntity with a status of INTERNAL_SERVER_ERROR and a body containing the exception message.
    return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                    .body(exception.getMessage()));
}",5,5,4,4
,6988713,"public static boolean timeIsBefore(Date d1, Date d2) {
  DateFormat f = new SimpleDateFormat(""HH:mm:ss.SSS"");
  return f.format(d1).compareTo(f.format(d2)) < 0;
}
","```java
public static boolean timeIsBefore(Date d1, Date d2) {
  // Create a date format object
  DateFormat f = new SimpleDateFormat(""HH:mm:ss.SSS"");
  // Compare the formatted strings of the dates
  return f.format(d1).compareTo(f.format(d2)) < 0;
}
```",4,3,4,4
,28487379,"long startTime;

long d = (System.currentTimeMillis() - startTime) * 30 / 1000;
","```java
// Start time in milliseconds
long startTime;

// Calculate the duration in seconds (30 minutes = 1800 seconds)
long d = (System.currentTimeMillis() - startTime) * 30 / 1000;
```",5,4,4,4
,46826855,"URIBuilder b = new URIBuilder(hppUrl);
params.entrySet().forEach(e-> b.addParameter(e.getKey(),e.getValue()));
System.out.println(b.build().toString());
","URIBuilder b = new URIBuilder(hppUrl); // Construct a URIBuilder from the given URL
params.entrySet().forEach(e-> b.addParameter(e.getKey(),e.getValue())); // Add all the parameters to the URIBuilder
System.out.println(b.build().toString()); // Build the URI and print it as a string",4,4,4,4
,36649026,"String s = ""blah\u00d0"";
String s = ""blah"" + '\u00d0';
String s = ""blah"" + ((char)0x00d0); 
byte[] b = s.getBytes(""ISO-8859-1"");
s = new String(b, ""ISO-8859-1"");
","String s = ""blah\u00d0""; // Unicode escape sequence for uppercase Greek letter Theta
String s = ""blah"" + '\u00d0'; // Append the Unicode character using char literal
String s = ""blah"" + ((char)0x00d0); // Append the Unicode character using numeric escape sequence
byte[] b = s.getBytes(""ISO-8859-1""); // Convert the string to bytes using ISO-8859-1 encoding
s = new String(b, ""ISO-8859-1""); // Reconvert the bytes to a string using the same encoding",5,5,4,5
,40297871,"public void confirmFireMissiles(View view) {
    DialogFragment newFragment = new CreatePlayerDialogFragment();
    newFragment.show(getSupportFragmentManager(), ""missiles"");
}
","public void confirmFireMissiles(View view) {
  // Create a new DialogFragment instance for player creation
  DialogFragment newFragment = new CreatePlayerDialogFragment();
  // Display the fragment using the support fragment manager
  newFragment.show(getSupportFragmentManager(), ""missiles"");
}",4,4,4,4
,14721563,"    OutputStreamWriter w = new OutputStreamWriter(connection.getOuputStream(), ""UTF-8"");
    w.write(urlParameters);
    w.flush();
","    OutputStreamWriter w = new OutputStreamWriter(connection.getOuputStream(), ""UTF-8""); 
    // Create an OutputStreamWriter to write data to the connection's OutputStream
    w.write(urlParameters); 
    // Write the URL parameters to the OutputStreamWriter
    w.flush(); 
    // Flush the OutputStreamWriter to send the data to the connection",5,4,4,5
,38143605,"    String name = ""some person name"".trim();
    if(name.indexOf("" "") != name.lastIndexOf("" "")) {
        int secondSpacePos = name.indexOf("" "", name.indexOf("" "") + 1);
        name = name.substring(0, secondSpacePos) + ""\n "" + name.substring(secondSpacePos);
    }
","```java
String name = ""some person name"".trim(); // trims leading and trailing whitespace

// if the name contains more than one space
if (name.indexOf("" "") != name.lastIndexOf("" "")) {
    int secondSpacePos = name.indexOf("" "", name.indexOf("" "") + 1); // gets the position of the second space

    name = name.substring(0, secondSpacePos) + ""\n "" + name.substring(secondSpacePos); // inserts a newline character after the first space
}
```",5,4,4,4
,8938220,"static void getFruitDetails(List<? extends FruitDetails> fruits) {
        for (FruitDetails fruitDetails : fruits) {
                System.out.println(fruitDetails.getFruitName());
        }
}
","```java
static void getFruitDetails(List<? extends FruitDetails> fruits) { // This method gets fruit details from a list of fruits
        for (FruitDetails fruitDetails : fruits) { // Loop over the fruits
                System.out.println(fruitDetails.getFruitName()); // Print the fruit name
        }
}
```",5,4,4,4
,5785094,"String s = ""Java is really cool"";
String words[] = s.split("" "");
String firstTwo = words[0] + ""  "" + words[1]; 
String lastTwo = words[words.length - 2] + "" ""
        + words[words.length - 1]; 
","String s = ""Java is really cool""; // Initializing a string variable 's' and assigning it a value
String words[] = s.split("" ""); // Splitting the string 's' by the delimiter "" "" and storing it in an array of words
String firstTwo = words[0] + ""  "" + words[1]; // Extracting the first two words and concatenating them
String lastTwo = words[words.length - 2] + "" "" + words[words.length - 1]; // Extracting the last two words and concatenating them",5,4,5,4
,10448421,"HttpServletRequest request = (HttpServletRequest) RequestContextHolder
    .currentRequestAttributes()
    .resolveReference(RequestAttributes.REFERENCE_REQUEST); 
","```java
HttpServletRequest request = (HttpServletRequest) RequestContextHolder
// Get the current request object from the RequestContextHolder
    .currentRequestAttributes()
    .resolveReference(RequestAttributes.REFERENCE_REQUEST); 
// Resolve the request reference and cast it to HttpServletRequest
```",5,4,4,4
,20875428,"Double value = jsonObject.get(""last"").asDouble();
Formatter formatter = new Formatter(Locale.US);
String res = formatter.format(""%+0.6f"", value);
","Double value = jsonObject.get(""last"").asDouble(); // Get ""last"" property from JSON as a double
Formatter formatter = new Formatter(Locale.US); // Create a formatter for US locale
String res = formatter.format(""%+0.6f"", value); // Format the double value to a string with specific format",5,4,5,4
,8425369,"Calendar cal = Calendar.getInstance();
cal.setTimeInMillis(timestampObj.getTime());
cal.add(Calendar.HOUR, 23);
cal.add(Calendar.SECOND, 55);
Date date=cal.getTime();
","```java
Calendar cal = Calendar.getInstance(); // Get a Calendar instance for the current date and time.
cal.setTimeInMillis(timestampObj.getTime()); // Set the calendar time to the time in the timestamp object.
cal.add(Calendar.HOUR, 23); // Add 23 hours to the calendar time.
cal.add(Calendar.SECOND, 55); // Add 55 seconds to the calendar time.
Date date = cal.getTime(); // Get a Date object for the new calendar time.
```",5,4,5,4
,52783661,"Intent i = getIntent();
Term term = i.getSerializableExtra(""term""); 

mTerm = mDBHelper.getTerm(term.getTermId());
","Intent i = getIntent(); // Get the intent that started this activity
Term term = i.getSerializableExtra(""term""); // Get the Term object from the intent's extra data

mTerm = mDBHelper.getTerm(term.getTermId()); // Get the Term object from the database using its ID",4,5,4,5
,1438028,"public <T extends Comparable<? super T>> void assertLessOrEqual(T left, T right) {
  if (left == null || right == null || left.compareTo(right) > 0) {
    String msg = ""[""+left+""] is not less than [""+right+""]"";
    throw new RuntimeException(""assertLessOrEqual: "" + msg);
  }
}
","```java
public <T extends Comparable<? super T>> void assertLessOrEqual(T left, T right) {
  if (left == null || right == null) { // If either 'left' or 'right' is null
    throw new RuntimeException(""assertLessOrEqual: Null value encountered""); // Throw an exception
  }
  if (left.compareTo(right) > 0) { // If 'left' is not less than 'right'
    String msg = ""[""+left+""] is not less than [""+right+""]""; // Construct an error message
    throw new RuntimeException(""assertLessOrEqual: "" + msg); // Throw an exception with the error message
  }
}
```",5,4,3,4
,25960847,"@OneToMany(cascade={CascadeType.ALL})
@JoinTable(name=""session_aggregategroupmap"")
private Map<String, GroupInfo> aggregateGroupMap; 
@OneToMany(cascade={CascadeType.ALL})
@JoinTable(name=""session_computationgroupmap"")
private Map<String, GroupInfo> computationGroupMap; 
","@OneToMany(cascade={CascadeType.ALL}) // Specifies a one-to-many relationship between this entity and the aggregateGroupMap property, with cascading operations (such as save, delete, etc.) for all operations.
@JoinTable(name=""session_aggregategroupmap"") // Specifies the join table to be used for this relationship.
private Map<String, GroupInfo> aggregateGroupMap; 

@OneToMany(cascade={CascadeType.ALL}) // Specifies a one-to-many relationship between this entity and the computationGroupMap property, with cascading operations (such as save, delete, etc.) for all operations.
@JoinTable(name=""session_computationgroupmap"") // Specifies the join table to be used for this relationship.
private Map<String, GroupInfo> computationGroupMap;",5,4,5,4
,21542080,"public int[] getArray(){
 return new int[500];
}
","```java
public int[] getArray(){
// Creates an array of size 500- Useful for storing large amounts of data
 return new int[500];
}
```",5,3,4,3
,25977352,"@XmlElementRefs({
    @XmlElementRef(name = ""firstName"", type = Person.class),
    @XmlElementRef(name = ""lastName"", type = Person.class)
})
","@XmlElementRefs({
    // Maps ""firstName"" XML element to Person class
    @XmlElementRef(name = ""firstName"", type = Person.class),
    // Maps ""lastName"" XML element to Person class
    @XmlElementRef(name = ""lastName"", type = Person.class)
})",5,5,4,4
,13602061,"@RequestMapping(value = ""/foo"", method = RequestMethod.POST) 
public String foo(@RequestParam(""myValues"") String[] myValues) {

    return ""view"";
}
","@RequestMapping(value = ""/foo"", method = RequestMethod.POST) // Maps HTTP POST requests to the ""/foo"" URL to this method
public String foo(@RequestParam(""myValues"") String[] myValues) { // Gets the ""myValues"" parameter from the request

    return ""view""; // Returns the logical ""view"" name
}",5,4,4,5
,27135132,"public static void main(String[] args) {
    for (Months m : Months.values()) {
        System.out.println(m.name()); 
    }
}
","```java
public static void main(String[] args) {
    // Iterates over all the values of the enum Months
    for (Months m : Months.values()) {
        // Prints the name of the current month
        System.out.println(m.name()); 
    }
}
```",5,5,5,5
,12052949,"    String str = ""1, 2 and 3, 93"";

    Matcher m = Pattern.compile(""\\d+"").matcher(str);
    while (m.find()) {
        System.out.println(m.group(0));
    }
","```java
String str = ""1, 2 and 3, 93"";

// Create a pattern to match digits
Matcher m = Pattern.compile(""\\d+"").matcher(str);

// Find all occurrences of the pattern in the string
while (m.find()) {
    // Print the matched digits
    System.out.println(m.group(0));
}
```",4,5,4,5
,46108687,"    System.out.println(""before click"");
    JOptionPane.showMessageDialog(null, ""Eggs are not supposed to be green."");
    System.out.println(""after click - do your code here"");
","    System.out.println(""before click""); // Prints ""before click"" to the console
    JOptionPane.showMessageDialog(null, ""Eggs are not supposed to be green.""); // Displays a pop-up dialog with the message ""Eggs are not supposed to be green.""
    System.out.println(""after click - do your code here""); // Prints ""after click - do your code here"" to the console after the user clicks the OK button on the pop-up dialog",5,4,4,5
,4059573,"        byte[] byt = new byte[4];    
        byt[0] = Byte.parseByte(lengthOfMessageInHex.substring(0, 2), 16);
        byt[1] = Byte.parseByte(lengthOfMessageInHex.substring(2, 4), 16);
        byt[2] = Byte.parseByte(lengthOfMessageInHex.substring(4, 6), 16);
        byt[3] = Byte.parseByte(lengthOfMessageInHex.substring(6, 8), 16);
","        byte[] byt = new byte[4];    // Declares and creates a byte array of size 4
        byt[0] = Byte.parseByte(lengthOfMessageInHex.substring(0, 2), 16);        // Parses the first two characters of lengthOfMessageInHex as hexadecimal and stores the result in byt[0]
        byt[1] = Byte.parseByte(lengthOfMessageInHex.substring(2, 4), 16);        // Parses the second two characters of lengthOfMessageInHex as hexadecimal and stores the result in byt[1]
        byt[2] = Byte.parseByte(lengthOfMessageInHex.substring(4, 6), 16);        // Parses the third two characters of lengthOfMessageInHex as hexadecimal and stores the result in byt[2]
        byt[3] = Byte.parseByte(lengthOfMessageInHex.substring(6, 8), 16);        // Parses the fourth two characters of lengthOfMessageInHex as hexadecimal and stores the result in byt[3]",5,5,4,5
,17956033,"public boolean contains(Object o) {
    return containsKey(o);
}
","```java
public boolean contains(Object o) {
    // Check whether the key associated with the given object is present in the map
    return containsKey(o);
}
```",5,3,4,4
,10132637,"ServerBootstrap sb = ....
sb.setOption(""writeBufferHighWaterMark"", ..);
sb.setOption(""writeBufferLowWaterMark"", ..);
","ServerBootstrap sb = .... // Creating a new ServerBootstrap object

sb.setOption(""writeBufferHighWaterMark"", ..); // Set the high water mark for the write buffer

sb.setOption(""writeBufferLowWaterMark"", ..); // Set the low water mark for the write buffer",5,5,5,4
,3798695,"        Scanner keyboard = new Scanner(System.in);
        int grade = 0;  
        double averageGrade = 0.0;
        int max = keyboard.nextInt();
        int min = max;
        int next = keyboard.nextInt();
","        Scanner keyboard = new Scanner(System.in); // Creates a Scanner object to read input from the console
        int grade = 0;  // Initializes the grade variable to 0
        double averageGrade = 0.0; // Initializes the averageGrade variable to 0.0
        int max = keyboard.nextInt(); // Reads the maximum grade from the console and assigns it to the max variable
        int min = max; // Initializes the min variable to the same value as max
        int next = keyboard.nextInt(); // Reads the next grade from the console and assigns it to the next variable

        while (next >= 0) { 
            //Continues the loop as long as the next grade is non-negative
            grade += next; 
            //Adds the next grade to the grade variable
            averageGrade = (double) grade / (max + 1); 
            //Calculates the average grade by dividing the total grade by the number of grades entered
            if (next < min) { 
                //Checks if the next grade is less than the minimum grade
                min = next; 
                //If it is, updates the minimum grade to the next grade
            }
            
            if (next > max) { 
                //Checks if the next grade is greater than the maximum grade
                max = next; 
                //If it is, updates the maximum grade to the next grade
            }
            
            next = keyboard.nextInt(); 
            //Reads the next grade from the console and assigns it to the next variable
        }",5,4,4,5
,58604291,"public void newNum(double num) {
    window.add(num);
}
","```java
public void newNum(double num) {
    // Adds the given number to the window
    window.add(num);
}
```",5,3,5,2
,67451586," @Override
 public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers(""/resources/**"", ""/static/**"", ""/css/**"", ""/js/**"", ""/images/**"",""/vendor/**"",""/fonts/**"").anyRequest(); 
 }
","@Override
public void configure(WebSecurity web) throws Exception {
    web.ignoring() // Ignoring security constraints for various static resource directories
            .antMatchers(""/resources/**"", ""/static/**"", ""/css/**"", ""/js/**"", ""/images/**"",""/vendor/**"",""/fonts/**"") // Matching URLs for static resources
            .anyRequest(); // Applying the ignoring security constraints to all other requests
}",4,4,4,3
,2062520,"public enum MyClass {
  INSTANCE;


}
","```java
public enum MyClass {
  // Singleton instance of the enum
  INSTANCE;
}
```",5,4,5,4
,18815730,"DetachedCriteria acceptedCatIds = DetachedCriteria.forClass(Cat.class);
acceptedCatIds.createAlias(""kitten"", ""kitten"")
              .add(Restrictions.like(""kitten.name"", ""%kitten%"" ))
              .setProjection(Projections.id());

Criteria acceptedCats = session.createCriteria(Cat.class)
acceptedCats.add(Subqueries.propertyIn(""id"", acceptedCatIds));
","DetachedCriteria acceptedCatIds = DetachedCriteria.forClass(Cat.class); // Create a detached criteria for the Cat class
acceptedCatIds.createAlias(""kitten"", ""kitten"") // Create an alias for theKitten property of the Cat class
              .add(Restrictions.like(""kitten.name"", ""%kitten%"" )) // Add a restriction to the criteria to match cats with kitten names containing ""%kitten%""
              .setProjection(Projections.id()); // Set the projection to only retrieve the cat IDs

Criteria acceptedCats = session.createCriteria(Cat.class) // Create a Criteria object for the Cat class
acceptedCats.add(Subqueries.propertyIn(""id"", acceptedCatIds)); // Add a subquery to the criteria to only select cats whose IDs are in the acceptedCatIds list",5,5,4,5
,55868275,"MetricCollection metricCollection = metricDefinition.defineQuery()
                        .startingFrom(recordDateTime.minusDays(7))
                        .endsBefore(recordDateTime)
                        .withAggregation(""Average"")
                        .withInterval(Period.minutes(5))
                        .withOdataFilter(""apiName eq 'PutBlob' and responseType eq 'Success' and geoType eq 'Primary'"")
                        .execute();
","MetricCollection metricCollection = metricDefinition.defineQuery()
                        // Sets the starting date and time for the query
                        .startingFrom(recordDateTime.minusDays(7))
                        // Sets the end date and time for the query
                        .endsBefore(recordDateTime)
                        // Sets the aggregation type for the metrics (Average, Sum, etc.)
                        .withAggregation(""Average"")
                        // Sets the interval for the metrics (minutes, hours, etc.)
                        .withInterval(Period.minutes(5))
                        // Sets the OData filter for the metrics
                        .withOdataFilter(""apiName eq 'PutBlob' and responseType eq 'Success' and geoType eq 'Primary'"")
                        // Executes the query and returns the results
                        .execute();",5,4,4,5
,5351483,"long diffSeconds = diff / 1000 % 60;  
long diffMinutes = diff / (60 * 1000) % 60; 
long diffHours = diff / (60 * 60 * 1000);
","long diffSeconds = diff / 1000 % 60;  // Calculate the number of seconds from the difference
long diffMinutes = diff / (60 * 1000) % 60; // Calculate the number of minutes from the difference, after removing the seconds
long diffHours = diff / (60 * 60 * 1000); // Calculate the number of hours from the difference, after removing the minutes and seconds",4,4,4,4
,17585062,"class LevelIter<Node> implements Iterable<Node> {
    Stack<Node> s = null;
    public LevelIter(Stack<Node> s) {
        this.s = (Stack)s.clone();
    }

}
","class LevelIter<Node> implements Iterable<Node> {
    Stack<Node> s = null;
    public LevelIter(Stack<Node> s) { // Constructor initializes the Stack data member
        this.s = (Stack)s.clone();
    }
    @Override
    public Iterator<Node> iterator() { // Default Java method to return an Iterator object
        return new LevelIterator();
    }
    private class LevelIterator implements Iterator<Node> {
        @Override
        public boolean hasNext() { // Method to check if the iterator has more elements to process
            return !s.isEmpty(); // Returns true if the Stack s is not empty, indicating the presence of more elements
        }
        @Override
        public Node next() { // Method to return the next element in the iteration
            return s.pop(); // Removes and returns the top element from the Stack s
        }
    }
}",5,4,4,5
,43275354,"editItemCatComboBox.addItemListener(new ItemListener() {
    public void itemStateChanged(ItemEvent arg0) {

    }
});
","```java
editItemCatComboBox.addItemListener(new ItemListener() { //Adds an ItemListener to the editItemCatComboBox
    public void itemStateChanged(ItemEvent arg0) { //This method is called when the selected item in the combo box is changed

    }
});
```",5,4,5,4
,55546506,"@Override
public void setPrimaryItem(ViewGroup container, int position, Object object) {

    Log.i(TAG, ""setPrimaryItem: "" + position);

    super.setPrimaryItem(container, position, object);
}
","@Override
public void setPrimaryItem(ViewGroup container, int position, Object object) {

    // Logs info about the position being set as primary
    Log.i(TAG, ""setPrimaryItem: "" + position);

    // Calls the super implementation of the method
    super.setPrimaryItem(container, position, object);
}",5,5,5,5
,27423158,"package javax.jms;
public interface DeliveryMode {
    int NON_PERSISTENT = 1;
    int PERSISTENT = 2;
}
","```java
package javax.jms;
public interface DeliveryMode {
    // Represents no persistence - messages are lost if the server fails
    int NON_PERSISTENT = 1;
    // Represents persistence - messages survive server failures
    int PERSISTENT = 2;
}
```",5,5,5,5
,67345665,"            Glide.with(context).load(new URL(url))
                    .thumbnail(0.5f)
                    .centerCrop()
                    .diskCacheStrategy(DiskCacheStrategy.ALL)
                    .into(postHolder.i_image);
","            // Load image from URL using Glide
            Glide.with(context).load(new URL(url))

                    // Load thumbnail of the original image with 50% size
                    .thumbnail(0.5f)

                    // Crop the image to fit into the target view
                    .centerCrop()

                    // Specify cache strategy for the image. 
                    // DiskCacheStrategy.ALL caches both the original and thumbnail images
                    .diskCacheStrategy(DiskCacheStrategy.ALL)

                    // Set the target ImageView for the image to be loaded into
                    .into(postHolder.i_image);",5,5,5,5
,14595677,"ImageAdapter imgAdapter;

main_gridview.setAdapter(imgAdapter);

imgAdapter.notifyDataSetChanged();
","ImageAdapter imgAdapter; // Declares an ImageAdapter object

main_gridview.setAdapter(imgAdapter); // Sets the adapter for the gridview

imgAdapter.notifyDataSetChanged(); // Notifies the adapter that the dataset has changed",5,3,4,4
,22487945,"int middleStart = (myArr.length - 1) / 2;
int middleEnd = (myArr.length - 1) - middleStart;
int elementsToRemove = middleEnd - middleStart + 1;

int[] result = new int[myArr.length - elementsToRemove];
System.arraycopy(myArr, 0, result, 0, middleStart);
System.arraycopy(myArr, middleEnd + 1, result, middleStart, middleStart);
","int middleStart = (myArr.length - 1) / 2; // Calculates the starting index of the middle section of the array
int middleEnd = (myArr.length - 1) - middleStart; // Calculates the ending index of the middle section of the array
int elementsToRemove = middleEnd - middleStart + 1; // Calculates the number of elements to remove from the array

int[] result = new int[myArr.length - elementsToRemove]; // Creates a new array with a length equal to the original array minus the number of elements to remove
System.arraycopy(myArr, 0, result, 0, middleStart); // Copies the elements from the beginning of the original array up to the middle section into the new array
System.arraycopy(myArr, middleEnd + 1, result, middleStart, middleStart); // Copies the elements from after the middle section of the original array into the new array",5,4,4,4
,28702957,"JSONObject responseObject = new JSONObject(JSONResponse);
JSONArray main = responseObject.getJSONArray(""findItemsAdvancedResponse"");
JSONObject result = main.getJSONObject(0).getJSONArray(""searchResult"").getJSONObject(0);
JSONArray items = result.getJSONArray(""item"");
","JSONObject responseObject = new JSONObject(JSONResponse); 

// Get ""findItemsAdvancedResponse"" array from JSON response
JSONArray main = responseObject.getJSONArray(""findItemsAdvancedResponse"");

// Get first result from ""searchResult"" array
JSONObject result = main.getJSONObject(0).getJSONArray(""searchResult"").getJSONObject(0);

// Get ""item"" array from JSON response
JSONArray items = result.getJSONArray(""item"");",5,5,5,5
,24695676,"private float getRandom() {
    return 0.4; 
}

for(int i = 0; i < 100; i++) {
    System.out.println(getRandom());
}
","private float getRandom() { // Gets a random number
    return 0.4; 
}

for(int i = 0; i < 100; i++) { // Iterates 100 times
    System.out.println(getRandom()); // Prints the random number
}",4,5,5,5
,10213486,"String strDate = ""24.12.12 03:30:00,000"";
SimpleDateFormat sdf = new SimpleDateFormat(""dd.MM.yy HH:mm:ss,SSS"");
Date date = sdf.parse(strDate);
","```java
String strDate = ""24.12.12 03:30:00,000""; // Stores a date and time string in the format ""dd.MM.yy HH:mm:ss,SSS"".

SimpleDateFormat sdf = new SimpleDateFormat(""dd.MM.yy HH:mm:ss,SSS""); // Creates a SimpleDateFormat object with the pattern ""dd.MM.yy HH:mm:ss,SSS"".

Date date = sdf.parse(strDate); // Parses the date string into a Date object.
```",5,4,3,4
,26202271,"Runtime rt = Runtime.getRuntime();
                try {
                    rt.exec(""cmd.exe /c cd /d d: &amp; start cmd.exe /k javac Maq.java"");
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
","Runtime rt = Runtime.getRuntime();
                try {
                    // Execute the command to change directory to D drive and start a new command prompt window to compile the Maq.java file
                    rt.exec(""cmd.exe /c cd /d d: & start cmd.exe /k javac Maq.java"");
                } catch (IOException e1) {
                    e1.printStackTrace();
                }",5,4,4,4
,52353241,"if (bookTable.getSelectedRow() >= 0){
    Book book = books.get(bookTable.convertRowIndexToModel(bookTable.getSelectedRow()));
    setBook(book);
}
","if (bookTable.getSelectedRow() >= 0){ //Checks if a row is selected in the book table
    Book book = books.get(bookTable.convertRowIndexToModel(bookTable.getSelectedRow())); //Gets the book object from the selected row
    setBook(book); //Sets the selected book as the current book
}",5,3,4,4
,32855751,"questions = new Question[]{
    new Question(""What's my name?"", new String[]{""John"",""Josh"",""Adam"",""Leo""}, 1),
    new Question(""What's my mom's name?"", new String[]{""Jessica"",""Crystal"",""Samanta"",""Kate""}, 1)

}
","```java
// Array of Question objects
Question[] questions = new Question[]{
    new Question(""What's my name?"", new String[]{""John"",""Josh"",""Adam"",""Leo""}, 1),
    // Question: ""What's my mom's name?"", Options: [""Jessica"",""Crystal"",""Samanta"",""Kate""], Correct Answer: 1
    new Question(""What's my mom's name?"", new String[]{""Jessica"",""Crystal"",""Samanta"",""Kate""}, 1)
};
```",5,4,4,5
,32146256,"public Ellipse(int w, int h){
    super(w,h);
    a = width / 2;
    b = width / 2;
}
","```java
public Ellipse(int w, int h){
    super(w,h); // Call superclass constructor with width and height
    a = width / 2; // Set horizontal radius to half of the width
    b = width / 2; // Set vertical radius to half of the width
}
```",5,4,4,3
,,,,,,,
,,,,,,,
Q3,18641997,"enum AuthorizationLevel {

    FULL(1), HALF(2), NONE(3);

    private final int level;

    private AuthorizationLevel(int level) {
        this.level = level;
    }

    public int getLevel() {
        return level;
    }
};
","enum AuthorizationLevel {

    FULL(1), HALF(2), NONE(3);

    private final int level; // level of authorization

    private AuthorizationLevel(int level) {
        this.level = level; // setting the level
    }

    public int getLevel() { // getter method for the level
        return level;
    }
};",5,4,4,3
,9390481,"ScheduledExecutorService schedulerExecutor = Executors.newScheduledThreadPool(2);
Callable<Process> callable = new Callable<Process>() {

    @Override
    public Process call() throws Exception {
        Process p = Runtime.getRuntime().exec(""cmd /c start /b java -jar D:\\MovieLibrary.jar"");
        return p;
    }
};
FutureTask<Process> futureTask = new FutureTask<Process>(callable);
schedulerExecutor.submit(futureTask);           

System.exit(0);
","// Create a scheduled executor service with a thread pool of size 2
ScheduledExecutorService schedulerExecutor = Executors.newScheduledThreadPool(2);

// Define a callable that will execute the desired command (""cmd /c start /b java -jar D:\\MovieLibrary.jar"") and return the process object
Callable<Process> callable = new Callable<Process>() {

    @Override
    public Process call() throws Exception {
        // Execute the command and return the process object
        Process p = Runtime.getRuntime().exec(""cmd /c start /b java -jar D:\\MovieLibrary.jar"");
        return p;
    }
};

// Create a future task that will run the callable
FutureTask<Process> futureTask = new FutureTask<Process>(callable);

// Submit the future task to the scheduler executor
schedulerExecutor.submit(futureTask);

// Exit the program
System.exit(0);",5,4,4,4
,33138610,"int i = 0;
Scanner scnr = new Scanner(System.in);
System.out.print(""Please enter a number: "");
i = scnr.nextInt();
while (i >= 1)
{
    System.out.println(Math.sqrt(i));
    i--;
}
","int i = 0;                                   // Initialize an integer variable `i` to 0
Scanner scnr = new Scanner(System.in);        // Create a `Scanner` object `scnr` for user input
System.out.print(""Please enter a number: "");   // Prompt the user to enter a number
i = scnr.nextInt();                        // Read the input number and store it in `i`
while (i >= 1)                             // Start a `while` loop that repeats as long as `i` is greater than or equal to 1
{
    System.out.println(Math.sqrt(i));       // Print the square root of `i`
    i--;                                   // Decrement `i` by 1
}",4,3,4,3
,61521737,"@GetMapping(""/downloadById.{id}/{fileName}"")
@ResponseBody
public ResponseEntity<StreamingResponseBody> downloadById(@PathVariable(""id"") int id) {
    final MultipartFile file = fileUtils.getMultiPartFileById(id, fileName, mimeType);

    final HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.parseMediaType(mimeType));
    headers.setContentLength(file.getBytes().length);
    headers.setContentDisposition(ContentDisposition.builder(""inline"").filename(fileName).build());
    final StreamingResponseBody ret = out -> {
        out.write(file.getBytes());
    };

    return new ResponseEntity<>(ret, headers, HttpStatus.OK);
}
","```java
@GetMapping(""/downloadById.{id}/{fileName}"")
@ResponseBody
public ResponseEntity<StreamingResponseBody> downloadById(@PathVariable(""id"") int id) {
    // Retrieve the multipart file with the given id and file name
    final MultipartFile file = fileUtils.getMultiPartFileById(id, fileName, mimeType);

    // Set the response headers
    final HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.parseMediaType(mimeType));
    headers.setContentLength(file.getBytes().length);
    headers.setContentDisposition(ContentDisposition.builder(""inline"").filename(fileName).build());

    // Create a streaming response body to write the file contents
    final StreamingResponseBody ret = out -> {
        // Write the file bytes to the output stream
        out.write(file.getBytes());
    };

    // Return the response entity with the headers and the streaming body
    return new ResponseEntity<>(ret, headers, HttpStatus.OK);
}
```",5,4,4,4
,54543505,"public static Color[][] doOperation(Color[][] imageArray) {
    int multiplier = 2;
    Color[][] newArray = new Color[imageArray.length*2][imageArray[0].length*2];

    for(int i = 0; i < newArray.length; i++)
        for(int j = 0; j < newArray[0].length; j++) {
            newArray[i][j] = imageArray[i/multiplier][j/multiplier];
        }
    return newArray;
}
","```java
public static Color[][] doOperation(Color[][] imageArray) {
    // Set the multiplier value for resizing the image
    int multiplier = 2;

    // Create a new 2D array with the resized dimensions
    Color[][] newArray = new Color[imageArray.length * multiplier][imageArray[0].length * multiplier];

    for (int i = 0; i < newArray.length; i++) {
        for (int j = 0; j < newArray[0].length; j++) {
            // Assign the value from the original array to the new array, scaled by the multiplier
            newArray[i][j] = imageArray[i / multiplier][j / multiplier];
        }
    }

    return newArray;
}
```",4,3,4,4
,47091039,"public class QuantitySerializer<Q extends Quantity<Q>> extends JsonSerializer<Quantity<Q>> {

    @Override
    public void serialize(Quantity<Q> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        try {
           gen.writeNumberField(""value"", value.getValue().intValue());
           gen.writeStringField(""unit"", value.getUnit().toString());
        } catch (NullPointerException e) {}
        gen.writeEndObject();
    }
}
","```java
public class QuantitySerializer<Q extends Quantity<Q>> extends JsonSerializer<Quantity<Q>> {

    @Override
    public void serialize(Quantity<Q> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject(); // Start writing the JSON object
        try {
            gen.writeNumberField(""value"", value.getValue().intValue()); // Write the value as a number
            gen.writeStringField(""unit"", value.getUnit().toString()); // Write the unit as a string
        } catch (NullPointerException e) {} // Catch and ignore any null values
        gen.writeEndObject(); // End writing the JSON object
    }
}
```",5,4,4,5
,40861136," ListAdapter listadp = listview.getAdapter();
       if (listadp != null) {
           int totalHeight = 0;
           for (int i = 0; i < listadp.getCount(); i++) {
               View listItem = listadp.getView(i, null, listview);
               listItem.measure(0, 0);
               totalHeight += listItem.getMeasuredHeight();
           }
           ViewGroup.LayoutParams params = listview.getLayoutParams();
           params.height = totalHeight + (listview.getDividerHeight() * (listadp.getCount() - 1));
           listview.setLayoutParams(params);
           listview.requestLayout();
","```java
ListAdapter listadp = listview.getAdapter(); // Get the adapter associated with the listview
if (listadp != null) { // Check if the adapter is not null
    int totalHeight = 0; // Initialize the total height of the listview
    for (int i = 0; i < listadp.getCount(); i++) { // Iterate through the adapter to get the height of each item
        View listItem = listadp.getView(i, null, listview); // Get the view for the current item
        listItem.measure(0, 0); // Measure the view to get its height
        totalHeight += listItem.getMeasuredHeight(); // Add the height of the current item to the total height
    }
    ViewGroup.LayoutParams params = listview.getLayoutParams(); // Get the layout params of the listview
    params.height = totalHeight + (listview.getDividerHeight() * (listadp.getCount() - 1)); // Set the height of the listview to the total height of the items plus the height of the dividers
    listview.setLayoutParams(params); // Set the layout params back to the listview
    listview.requestLayout(); // Request a layout update to apply the new height
}
```",5,4,5,5
,50576446,"public class A {

private static final Set<Class<? extends A>> INSTANCE_HOLDER = new HashSet<>();

public A() {
    if (INSTANCE_HOLDER.contains(this.getClass()))
        throw new RuntimeException(""can't create more than one instance."");

    INSTANCE_HOLDER.add(this.getClass());
}
}
","```java
public class A {

    // Set to hold classes of all instances of A
    private static final Set<Class<? extends A>> INSTANCE_HOLDER = new HashSet<>();

    public A() {
        // Check if an instance of this class already exists
        if (INSTANCE_HOLDER.contains(this.getClass()))
            // Throw an exception if an instance already exists
            throw new RuntimeException(""can't create more than one instance."");

        // Add the class of this instance to the set
        INSTANCE_HOLDER.add(this.getClass());
    }
}
```",5,4,4,5
,24774917,"import java.math.BigDecimal;
import java.util.Scanner;


public class home {

public static void main(String[] args) {
  Scanner scan = new Scanner(System.in); 
  BigDecimal bg1 = scan.nextBigDecimal();
  BigDecimal bg2 = scan.nextBigDecimal();

  System.out.println(""Result is "" + bg1.add(bg2));
 } 
}
","import java.math.BigDecimal; // Importing the BigDecimal class from java.math package
import java.util.Scanner;   // Importing the Scanner class from java.util package

public class home {          // Defining the home class

  public static void main(String[] args) { // Defining the main method
    Scanner scan = new Scanner(System.in); // Creating a Scanner object scan that reads input from the console

    // Reading the first BigDecimal value using the nextBigDecimal() method of the Scanner object
    BigDecimal bg1 = scan.nextBigDecimal(); 

    // Reading the second BigDecimal value using the nextBigDecimal() method of the Scanner object
    BigDecimal bg2 = scan.nextBigDecimal(); 

    // Printing out the result of the addition using the add() method of the BigDecimal class
    System.out.println(""Result is "" + bg1.add(bg2)); 
  }
}",5,5,4,4
,60366809,"@JsonInclude(JsonInclude.Include.NON_NULL)
public class ReportRequest {

  @NotNull
  private String startDate;

  @NotNull
  private String endDate;

  private Integer userId;

  private Integer type;

 }
","@JsonInclude(JsonInclude.Include.NON_NULL) // Specifies that fields with null values should be excluded from JSON serialization
public class ReportRequest {

  @NotNull // Specifies that the field cannot be null
  private String startDate;

  @NotNull // Specifies that the field cannot be null
  private String endDate;

  private Integer userId; // User ID

  private Integer type; // Report type
 }",5,5,4,4
,15111644,"CriteriaQuery<Tuple> cq = builder.createTupleQuery();
Root<Company> company = cq.from(Company.class);
Join<Company, Asset> secondTable = company.join(""assets"", JoinType.LEFT);
cq.multiselect(company.<String>get(""id"").alias(""id""), builder.count(secondTable).alias(""assetCount""));
cq.groupBy( company.<Long>get(""id"") );

Query query = em.createQuery(cq);
List<Tuple> results = query.getResultList();
","CriteriaQuery<Tuple> cq = builder.createTupleQuery(); // Create a new tuple query
Root<Company> company = cq.from(Company.class); // Specify the root entity of the query
Join<Company, Asset> secondTable = company.join(""assets"", JoinType.LEFT); // Join to the 'assets' association with a left outer join
cq.multiselect(company.<String>get(""id"").alias(""id""), builder.count(secondTable).alias(""assetCount"")); // Specify the columns to be returned in the result
cq.groupBy( company.<Long>get(""id"") ); // Group the results by the 'id' property.

Query query = em.createQuery(cq); // Create a new query from the criteria query
List<Tuple> results = query.getResultList(); // Execute the query and get the results as a list of tuples",5,4,4,5
,14309221,"public static boolean rectangleCircleIntersection(RectangleRegion rect, CircularRegion circle, int padding) {
    int paddedRadius = circle.getRadius() + padding;
    int circleDistance_x = PsyMath.abs((circle.getX()+paddedRadius) - (rect.getX()+rect.getWidth()/2));
    int circleDistance_y = PsyMath.abs((circle.getY()+paddedRadius) - (rect.getY()+rect.getHeight()/2));

    if (circleDistance_x > (rect.getWidth()/2 + paddedRadius)) { return false; }
    if (circleDistance_y > (rect.getHeight()/2 + paddedRadius)) { return false; }

    if (circleDistance_x <= (rect.getWidth()/2)) { return true; } 
    if (circleDistance_y <= (rect.getHeight()/2)) { return true; }

    int cornerDistance_sq = (int)Math.pow((circleDistance_x - rect.getWidth()/2),2) +
                         (int)Math.pow((circleDistance_y - rect.getHeight()/2),2);

    return (cornerDistance_sq <= (int)Math.pow(paddedRadius,2));
}
","```java
public static boolean rectangleCircleIntersection(RectangleRegion rect, CircularRegion circle, int padding) {
    // Padding radius includes padding
    int paddedRadius = circle.getRadius() + padding;

    // Calculating distance between circle and rectangle
    int circleDistance_x = Math.abs((circle.getX() + paddedRadius) - (rect.getX() + rect.getWidth() / 2));
    int circleDistance_y = Math.abs((circle.getY() + paddedRadius) - (rect.getY() + rect.getHeight() / 2));

    // Checking if circle is outside of rectangle
    if (circleDistance_x > (rect.getWidth() / 2 + paddedRadius)) {
        return false;
    }
    if (circleDistance_y > (rect.getHeight() / 2 + paddedRadius)) {
        return false;
    }

    // Checking if circle is inside rectangle
    if (circleDistance_x <= (rect.getWidth() / 2)) {
        return true;
    }
    if (circleDistance_y <= (rect.getHeight() / 2)) {
        return true;
    }

    // Calculating squared distance between circle and closest corner of rectangle
    int cornerDistance_sq = (int) Math.pow((circleDistance_x - rect.getWidth() / 2), 2) + (int) Math.pow((circleDistance_y - rect.getHeight() / 2), 2);

    // Checking if circle intersects with corner of rectangle
    return (cornerDistance_sq <= (int) Math.pow(paddedRadius, 2));
}
```",5,4,4,4
,30800767,"float lastX, lastY;

if(sprite.getY()>=700){
  lastX = sprite.getX();
  lastY = sprite.getY();
  enemyIterator.remove();
  Pools.free(sprite);
}

System.out.println(""Removed sprite coordinates where: "" + lastX + "", "" + lastY);
","float lastX, lastY; // Declare variables lastX and lastY to store the coordinates of the sprite before it is removed

if (sprite.getY() >= 700) { // Check if the sprite's y-coordinate is greater than or equal to 700
  lastX = sprite.getX(); // Store the sprite's x-coordinate in lastX
  lastY = sprite.getY(); // Store the sprite's y-coordinate in lastY
  enemyIterator.remove(); // Remove the sprite from the enemy iterator
  Pools.free(sprite); // Free the sprite from the object pool
}

// Print the removed sprite's coordinates for informational purposes
System.out.println(""Removed sprite coordinates where: "" + lastX + "", "" + lastY);",5,4,4,5
,39877996," public void addItem(final ArrayList<String> list,int h) {

    final int oldsize = items.size();
    for (int i=list.size()-1; i>=0 ;i--){
        items.add(0,list.get(i));
    }

    activity.runOnUiThread(new Runnable() {
        @Override
        public void run() {
            notifyItemRangeInserted(0,items.size()-oldsize);
        }
    });

}
","```java
public void addItem(final ArrayList<String> list,int h) {

    // Store the initial size of the items list
    final int oldsize = items.size();

    // Add all elements from the list to the beginning of the items list
    for (int i=list.size()-1; i>=0 ;i--){
        items.add(0,list.get(i));
    }

    // Run the code in the UI thread to update the adapter
    activity.runOnUiThread(new Runnable() {
        @Override
        public void run() {
            // Notify that the items in range [0, items.size()-oldsize) have been inserted
            notifyItemRangeInserted(0,items.size()-oldsize);
        }
    });

}
```",5,4,5,5
,16921536,"if (evt.getKeyCode() == 10) {
  try {
    int offset=ta.getLineOfOffset(ta.getCaretPosition());
    int start=ta.getLineStartOffset(offset);
    int end=ta.getLineEndOffset(offset);

    System.out.println(""Text: ""+ta.getText(start, (end-start)));                
  } catch (BadLocationException ex) {
    System.out.println(ex.getMessage());
  }
}
","if (evt.getKeyCode() == 10) { // check if the Enter key is pressed
  try {
    int offset = ta.getLineOfOffset(ta.getCaretPosition()); // get the current cursor position in the textarea
    int start = ta.getLineStartOffset(offset); // get the start of the line where the cursor is
    int end = ta.getLineEndOffset(offset); // get the end of the line where the cursor is

    System.out.println(""Text: "" + ta.getText(start, (end - start))); // print the text of the selected line
  } catch (BadLocationException ex) {
    System.out.println(ex.getMessage()); // handle any exception that may occur
  }
}",5,4,5,4
,12324249,"public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    String word8 = sc.nextLine();
    String word9 = sc.nextLine();
    int index = word8.indexOf(word9);
    sc.close();
    int occurrences = 0;
    while (index != -1) {
        occurrences++;
        word8 = word8.substring(index + 1);
        index = word8.indexOf(word9);
    }
    System.out.println(""No of "" + word9 + "" in the input is : "" + occurrences);
}
","```java
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    String word8 = sc.nextLine(); // Reads the first input string from the user
    String word9 = sc.nextLine(); // Reads the second input string from the user
    int index = word8.indexOf(word9); // Finds the first occurrence of word9 in word8
    sc.close(); 
    
    int occurrences = 0; // Initializes a counter to count the occurrences of word9 in word8
    while (index != -1) { // Loops until there are no more occurrences of word9 in word8
        occurrences++; // Increments the counter
        word8 = word8.substring(index + 1); // Updates word8 to the substring after the occurrence of word9
        index = word8.indexOf(word9); // Finds the next occurrence of word9 in word8
    }
    System.out.println(""No of "" + word9 + "" in the input is : "" + occurrences); // Prints the count of occurrences
}
```",4,4,4,5
,60205608,"val openConnection = URL(url).openConnection()

val bytes = if (openConnection.contentEncoding == ""gzip"") {
    GZIPInputStream(openConnection.getInputStream()).readBytes()
} else {
    openConnection.getInputStream().readBytes()
}
val file = File(""e:\\text.jpg"")
file.writeBytes(bytes)
","val openConnection = URL(url).openConnection() // Open a connection to the given url

val bytes = if (openConnection.contentEncoding == ""gzip"") {
    // If the content encoding is ""gzip""
    GZIPInputStream(openConnection.getInputStream()).readBytes() // Decompress the gzipped content
} else {
    openConnection.getInputStream().readBytes() // Read the content as bytes
}
val file = File(""e:\\text.jpg"") // Create a file object for the target file
file.writeBytes(bytes) // Write the bytes to the file",5,5,5,5
,31775071,"Shell shell = ... current shell

FileDialog fileDialog = new FileDialog(shell, SWT.SAVE);

fileDialog.setFilterExtensions(new String [] {""*.png"", ""*.*""});

fileDialog.setFilterPath(.... any default path you want ....);

String filePath = fileDialog.open();



File file = new File(filePath);

ChartUtilities.saveChartAsPNG(file, calidad, chart, 800, 600);
","```java
FileDialog fileDialog = new FileDialog(shell, SWT.SAVE); // Create a file dialog for saving

fileDialog.setFilterExtensions(new String [] {""*.png"", ""*.*""}); // Set file filter extensions

fileDialog.setFilterPath(.... any default path you want ....); // Set the default filter path

String filePath = fileDialog.open(); // Open the file dialog and get the selected file path

if (filePath != null) { // If a file was selected
    File file = new File(filePath); // Create a file object from the selected file path

    ChartUtilities.saveChartAsPNG(file, calidad, chart, 800, 600); // Save the chart as a PNG file
}
```",5,5,5,5
,45894144,"public synchronized void foo() {

}

public void bar() {
    synchronized (this) {

    }
}
","```java
// Synchronizes the current thread on the lock object 'this'
public synchronized void foo() {

}

// Synchronizes the current thread on the lock object 'this'
public void bar() {
    // Synchronizes the current thread on the lock object 'this'
    synchronized (this) {

    }
}
```",5,4,4,4
,9423898,"PersistenceManager pm = getPersistenceManager();
try {
    q = pm.newQuery(MyObject.class, query);
    List<MyObject> objects = (List<MyObject>) q.execute();
    pm.currentTransaction().begin(); 
    for (MyObject object: objects) {
        object.setMyField(newValue);
    }
    pm.currentTransaction().commit(); 
    System.out.println(objects); 
} finally {
    pm.close();
}
","```java
// Get a PersistenceManager.
PersistenceManager pm = getPersistenceManager();
try {
    // Create a new query for MyObject class.
    q = pm.newQuery(MyObject.class, query);
    // Execute the query and get the results.
    List<MyObject> objects = (List<MyObject>) q.execute();
    // Start a new transaction.
    pm.currentTransaction().begin(); 
    // Iterate over the results and update the objects.
    for (MyObject object: objects) {
        // Set the value of myField for each object.
        object.setMyField(newValue);
    }
    // Commit the transaction.
    pm.currentTransaction().commit(); 
    // Print the updated objects.
    System.out.println(objects); 
} finally {
    // Close the PersistenceManager.
    pm.close();
}
```",4,4,4,4
,18167427,"class YourClass {
    String mIpAddress;

    

    void yourMethod() {
        
        ipAddress = total;
    }
}
","class YourClass {
    String mIpAddress;
    // Variable to store the IP address

    void yourMethod() {
        String total = ""192.168.1.1""; // Assume this is the IP address
        ipAddress = total; // Assigning the IP address to the variable
    }
}",5,4,5,5
,17263133,"function string.uchar(c, ...)
    if c then
        local t, h, s = {}, 128, string.uchar(...)
        while c >= h do
            t[#t+1] = 128 + c%64
            c = math.floor(c/64)
            h = h > 32 and 32 or h/2
        end
        t[#t+1] = 256 - 2*h + c
        return s.char((table.unpack or unpack)(t)):reverse()..s
    else
        return ''
    end
end
","```java
function string.uchar(c, ...)
    if c then
        -- Create a table to store the encoded characters
        local t, h, s = {}, 128, string.uchar(...)

        -- Encode the characters and add them to the table
        while c >= h do
            -- Add the encoded character to the table
            t[#t+1] = 128 + c%64

            -- Update the current character and the maximum value for the next character
            c = math.floor(c/64)
            h = h > 32 and 32 or h/2
        end

        -- Add the last character to the table
        t[#t+1] = 256 - 2*h + c

        -- Convert the table of encoded characters to a string and reverse it
        return s.char((table.unpack or unpack)(t)):reverse()..s
    else
        return ''
    end
end
```",5,5,3,5
,62010195,"@Configuration
public class RepositoryConfigurationBean implements BeanFactoryPostProcessor {

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {
        try {


            configurableListableBeanFactory.registerSingleton(""abc"", X1.class.getConstructor().newInstance());
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            e.printStackTrace();
        }
   }
","```java
@Configuration
public class RepositoryConfigurationBean implements BeanFactoryPostProcessor {

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {
        try {
            // Register a singleton bean with the name ""abc"" and the instance of the class X1
            configurableListableBeanFactory.registerSingleton(""abc"", X1.class.getConstructor().newInstance());
        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
            e.printStackTrace();
        }
    }
}
```",5,5,5,5
,37287430,"            try {
            String content = """";
            Connection conn = DriverManager.getConnection( Host, Name, Pass );  
            PreparedStatement pst = conn.prepareStatement(""SELECT * From `news_1`"");
            ResultSet rs = pst.executeQuery();
            while(rs.next()) {
                content = content + rs.getString(""title"") + ""\n"";
                content = content + rs.getString(""content"") + ""\n"";
                content = content + ""\n"";
            }
            textArea.setText(content);
        } 
        catch (Exception e) {
        }
","          try {
            // Declares a string variable to store the news content
            String content = """";
            // Establishes a connection to the database
            Connection conn = DriverManager.getConnection( Host, Name, Pass );  
            // Prepares a statement to select all rows from the ""news_1"" table
            PreparedStatement pst = conn.prepareStatement(""SELECT * From `news_1`"");
            // Executes the query and stores the result in a ResultSet
            ResultSet rs = pst.executeQuery();
            // Iterates through the ResultSet and appends the title and content of each news item to the content string
            while(rs.next()) {
                content = content + rs.getString(""title"") + ""\n"";
                content = content + rs.getString(""content"") + ""\n"";
                content = content + ""\n"";
            }
            // Sets the text of the text area to the content string
            textArea.setText(content);
        } 
        // Catches any exceptions that may occur while executing the code
        catch (Exception e) {
        }",5,4,4,4
,26012709,"new Thread(){
    public void run() {

        try {
            irc_bot.initiate(server, ports);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }}.start();
","`new Thread() { // Creating a new thread`
    public void run() { // Overriding the run method of Thread class

        try {
            // Attempting to initiate the IRC bot
            irc_bot.initiate(server, ports);
        } catch (Exception e) {
            e.printStackTrace(); // Printing any exceptions that occurred during initiation
        }

    }
}.start(); // Starting the newly created thread",5,5,4,5
,21831721,"@Transactional(propagation = Propagation.REQUIRES_NEW)
private void readRowFromExcel(Row row){

    for(Row row : sheet){

        Customer customer = readCustomerFromExcel(row)
        CustomerDeatails customerDetails = readCustomerDetailsFromExcel(row);
        MyEntity myEntity = readMyEntityFromExcel(row);


        customerService.save(customer,customerDetails);
        myEntityService.save(myEntity)
    }   

}
","```java
@Transactional(propagation = Propagation.REQUIRES_NEW) // Start a new transaction for each row
private void readRowFromExcel(Row row) {

    for (Row row : sheet) { // Iterate over each row in the sheet

        Customer customer = readCustomerFromExcel(row); // Read customer details from the row
        CustomerDetails customerDetails = readCustomerDetailsFromExcel(row); // Read customer details from the row
        MyEntity myEntity = readMyEntityFromExcel(row); // Read myEntity details from the row

        // Save customer and customer details
        customerService.save(customer, customerDetails); // Save customer and customer details to the database

        // Save myEntity
        myEntityService.save(myEntity); // Save myEntity to the database
    }
}
```",4,3,4,2
,25757655,"@POST
@Path(""/{uuid}/invoke/{method}"")
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
public Response invokeMethod (
    MultivaluedMap<String,String> params,
    @PathParam(""uuid"") String uuid,
    @PathParam(""method"") String method
) {
","@POST
@Path(""/{uuid}/invoke/{method}"") // This annotation maps HTTP POST requests to the URI path specified in braces
@Consumes(MediaType.APPLICATION_FORM_URLENCODED) // This annotation consumes form-encoded data in the request body
public Response invokeMethod(
        // The following line takes the form-encoded data from the request and stores it in a MultivaluedMap
        MultivaluedMap<String, String> params,
        // This line extracts the UUID parameter from the URI path
        @PathParam(""uuid"") String uuid,
        // This line extracts the method parameter from the URI path
        @PathParam(""method"") String method
) {
        // This line processes the request and generates a response
        return Response.ok().entity(""Invoked method: "" + method + "" on UUID: "" + uuid).build();
}",5,5,4,4
,12880049,"import java.lang.Math;

public class Homework2 {
public static void main(String[] args){

    int d1 = (int) (Math.random()*(10-3+1)+3);
    int d2 = (int) (Math.random()*(10-3+1)+3);

    double doubMatrix1[][] = new double[d1][d2];
    double doubMatrix2[][];
    double doubMatrix3[][];


}
}
","```java
import java.lang.Math;

public class Homework2 {
    public static void main(String[] args) {

        // Generate two random integers between 3 and 10 (inclusive) for the dimensions of the matrices
        int d1 = (int) (Math.random() * (10 - 3 + 1) + 3);
        int d2 = (int) (Math.random() * (10 - 3 + 1) + 3);

        // Declare the first double precision matrix with dimensions d1 x d2
        double doubMatrix1[][] = new double[d1][d2];
        
        // Declare the second double precision matrix
        double doubMatrix2[][];
        
        // Declare the third double precision matrix                                                                                            
        double doubMatrix3[][];

        // ... The rest of your code goes here
    }
}
```",5,4,4,4
,19821542,"String s = response.toString();
JsonArray json = JsonArray.readFrom(s);
for (int i = 0; i < json.size(); i++) {
    JsonObject show = json.get(i).asObject();
    int episode = show.get(""episode"").asInt();
    String time = show.get(""first_aired_iso"").asString();
    System.out.println(""Episode "" + episode + "" - "" + time);
}
","```java
String s = response.toString();                     // Convert the API response to a String
JsonArray json = JsonArray.readFrom(s);            // Parse the String response as a JSON array
for (int i = 0; i < json.size(); i++) {           // Iterate through each element in the JSON array
    JsonObject show = json.get(i).asObject();     // Get the current element as a JSON object
    int episode = show.get(""episode"").asInt();     // Extract the ""episode"" field as an integer
    String time = show.get(""first_aired_iso"").asString();  // Extract the ""first_aired_iso"" field as a String
    System.out.println(""Episode "" + episode + "" - "" + time);  // Print the episode and time
}
```",5,4,4,5
,44756739,"

def map1 = [:]
map1['abcd'] = '1.2.3'
map1['xyx'] = '4.6.3'

def map2 = [:]
map2['abcd'] = '1.2.6'
map2['xyx'] = '4.6.3'

map1.each{k1,v1->
    def v2 = map2[k1]
    if(v1!=v2) println ""the value of $k1 in list1 `$v1` is ""+( v1>v2 ? ""greater"" : ""less"" ) +"" then `$v2` in list2""
}
","```java
def map1 = [:]  // Create an empty map
map1['abcd'] = '1.2.3'  // Add a key-value pair to the map
map1['xyx'] = '4.6.3'   // Add another key-value pair

def map2 = [:] // Create another empty map
map2['abcd'] = '1.2.6'  // Add key-value pairs to the new map
map2['xyx'] = '4.6.3'

map1.each{k1,v1->  // Iterate over the first map
    def v2 = map2[k1]  // Get the value for the same key in the second map
    if(v1!=v2) // Compare the values
        println ""the value of $k1 in list1 `$v1` is ""+( v1>v2 ? ""greater"" : ""less"" ) +"" then `$v2` in list2""  // Print a message if the values are different
}
```",5,4,4,4
,28481984,"ArrayList<Integer> myInts = new ArrayList<Integer>();
myInts.add(1);
myInts.add(2);
myInts.add(3);
myInts.add(4);
int i = myInts.get(r.nextInt(myInts.size())); 
myInts.remove(3);
int j = myInts.get(r.nextInt(myInts.size())); 
","//ArrayList to store integers
ArrayList<Integer> myInts = new ArrayList<Integer>();

//Adding integers to the ArrayList
myInts.add(1);
myInts.add(2);
myInts.add(3);
myInts.add(4);

//Getting a random number within the size of the ArrayList
int r = new Random().nextInt(myInts.size()); 

//Getting an integer from the ArrayList using the random number index
int i = myInts.get(r.nextInt(myInts.size())); 

//Removing an element from the ArrayList using index 3
myInts.remove(3);

//Getting an integer from the ArrayList using the random number index
int j = myInts.get(r.nextInt(myInts.size()));",5,4,4,4
,57183162,"@Bean
public RedisMessageListenerContainer redisMessageListenerContainer() {
    RedisMessageListenerContainer mlc = new RedisMessageListenerContainer();

    mlc.setConnectionFactory(lettuceConnectionFactory());
    mlc.addMessageListener(new MessageListenerAdapter(redisMsgHandler), 
                           new ChannelTopic(""pubsub:queue"");


    mlc.addMessageListener(new MessageListenerAdapter(redisMsgHandlerAnother), 
                           new ChannelTopic(""pubsub:Otherqueue"");

    return mlc;
}
","```java
@Bean
public RedisMessageListenerContainer redisMessageListenerContainer() {
    // Initializes a new RedisMessageListenerContainer
    RedisMessageListenerContainer mlc = new RedisMessageListenerContainer();

    // Sets the connection factory for the message listener container
    mlc.setConnectionFactory(lettuceConnectionFactory());
    
    // Adds a message listener for the ""pubsub:queue"" channel
    // MessageListenerAdapter will delegate message handling to redisMsgHandler instance.
    mlc.addMessageListener(new MessageListenerAdapter(redisMsgHandler), new ChannelTopic(""pubsub:queue""));

    // Adds a message listener for the ""pubsub:Otherqueue"" channel
    // MessageListenerAdapter will delegate message handling to redisMsgHandlerAnother instance.
    mlc.addMessageListener(new MessageListenerAdapter(redisMsgHandlerAnother), new ChannelTopic(""pubsub:Otherqueue""));

    return mlc;
}
```",5,5,4,5
,22156060,"
 public void complexMethod() {}
","```java
public void complexMethod() {
  // this method performs a complex operation
  doSomething();
  
  // this condition checks if a certain condition is met
  if (condition) {
    // this block of code is executed if the condition is met
    doSomethingElse();
  } else {
    // this block of code is executed if the condition is not met
    doSomethingDifferent();
  }
}
```",5,4,3,4
,21125320,"JButton myButton = new JButton();
myButton.setActionCommand(""myButtonCommand"");

public void actionPerformed(ActionEvent ae) {
  String actionCommand = ae.getActionCommand();
  if (actionCommand.equals(""myButtonCommand"")) {

  }
}
","JButton myButton = new JButton(); // Creates a new JButton object called ""myButton"".
myButton.setActionCommand(""myButtonCommand""); // Sets the action command for myButton to ""myButtonCommand"".

public void actionPerformed(ActionEvent ae) { // Defines an action listener method to handle button clicks.
  String actionCommand = ae.getActionCommand(); // Retrieves the action command from the ActionEvent object.
  if (actionCommand.equals(""myButtonCommand"")) { // Checks if the action command matches the value set in `myButton.setActionCommand()`.

  }
}",5,4,4,4
,40138814,"    LocalDate minDate = LocalDate.of(2000, Month.JANUARY, 1);
    LocalDate maxDate = LocalDate.of(2014, Month.DECEMBER, 31);
    DatePicker picker = new DatePicker(minDate.plusYears(2));
    picker.setDayCellFactory((p) -> new DateCell() {
        @Override
        public void updateItem(LocalDate ld, boolean bln) {
            super.updateItem(ld, bln);
            setDisable(ld.isBefore(minDate) || ld.isAfter(maxDate));
        }
    });
    Platform.runLater(() -> {
        picker.getEditor().clear();
    });
","    LocalDate minDate = LocalDate.of(2000, Month.JANUARY, 1); // Minimum selectable date
    LocalDate maxDate = LocalDate.of(2014, Month.DECEMBER, 31); // Maximum selectable date
    // Create a DatePicker with the minimum date set to 2 years after the start date
    DatePicker picker = new DatePicker(minDate.plusYears(2));
    // Set a lambda expression as the DayCellFactory to control the cell behaviour
    picker.setDayCellFactory((p) -> new DateCell() {
        @Override
        public void updateItem(LocalDate ld, boolean bln) {
            super.updateItem(ld, bln);
            // Disable the cell if the date is before the minimum or after the maximum
            setDisable(ld.isBefore(minDate) || ld.isAfter(maxDate));
        }
    });
    // Clear the editor to remove any existing text
    Platform.runLater(() -> {
        picker.getEditor().clear();
    });",5,4,4,5
,12083437,"   public void schedule(int delayMillis) {
    if (delayMillis < 0) {
      throw new IllegalArgumentException(""must be non-negative"");
    }
    cancel();
    isRepeating = false;
    timerId = createTimeout(this, delayMillis);
    timers.add(this);  
  }
","public void schedule(int delayMillis) {
    // Throw exception if the delay is negative
    if (delayMillis < 0) {
      throw new IllegalArgumentException(""must be non-negative"");
    }

    // Cancel any existing schedule
    cancel();

    // Set repeating flag to false
    isRepeating = false;

    // Create a new timer to schedule the current instance
    timerId = createTimeout(this, delayMillis);

    // Add the instance to the timers list
    timers.add(this);  
  }",5,5,5,5
,5176771,"    public static void sortValue(Hashtable<?, Integer> t){


       ArrayList<Map.Entry<?, Integer>> l = new ArrayList(t.entrySet());
       Collections.sort(l, new Comparator<Map.Entry<?, Integer>>(){

         public int compare(Map.Entry<?, Integer> o1, Map.Entry<?, Integer> o2) {
            return o1.getValue().compareTo(o2.getValue());
        }});

       System.out.println(l);
    }
","```java
public static void sortValue(Hashtable<?, Integer> t){
    // Creating a list of map entries //
    ArrayList<Map.Entry<?, Integer>> l = new ArrayList(t.entrySet());

    // Sorting the list using a custom comparator //
    Collections.sort(l, new Comparator<Map.Entry<?, Integer>>(){
        public int compare(Map.Entry<?, Integer> o1, Map.Entry<?, Integer> o2) {
            // Comparing the values of the map entries //
            return o1.getValue().compareTo(o2.getValue());
        }});

    // Printing the sorted list //
    System.out.println(l);
}
```",5,5,5,5
,66140255,"BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
String[] values = line.split("" "");
int[] arr = new int[values.length];
int sum=0;
for (int i = 0; i < values.length; i++) {
   arr[i] = Integer.parseInt(values[i]);
   sum+=arr[i];
}
double avg = sum/arr.length;
System.out.println(""Sum is"" + sum + "" and the average is "" + avg);
","**BufferedReader br = new BufferedReader(new InputStreamReader(System.in));**
// Reads input from the console

**String[] values = line.split("" "");**
// Splits the input line into an array of strings at each whitespace

**int[] arr = new int[values.length];**
// Creates an array of integers to store the converted values

**int sum = 0;**
// Initialize the sum to 0

// Iterate over each string in the array of strings, convert it to an integer, add it to the sum, and store it in the array of integers
**for (int i = 0; i < values.length; i++) {
   arr[i] = Integer.parseInt(values[i]);
   sum += arr[i];
}**

**double avg = sum/arr.length;**
// Calculate the average of the values

**System.out.println(""Sum is"" + sum + "" and the average is "" + avg);**
// Print the sum and average to the console",5,4,4,4
,2237161,"@Controller
@RequestMapping(""/basic"")
public class HelloWorldController {
    @RequestMapping(value=""/hello.do"", method=RequestMethod.GET)
    public ModelAndView helloWorld() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName(""basic/helloWorld"");
        mav.addObject(""message"", ""Hello World From Phuong!"");
        return mav;
    }
}
","@Controller // Indicates that this class is a Spring MVC controller
@RequestMapping(""/basic"") // Maps web requests starting with ""/basic"" to this controller
public class HelloWorldController {
    @RequestMapping(value=""/hello.do"", method=RequestMethod.GET) // Maps GET requests to ""/basic/hello.do"" to the method below
    public ModelAndView helloWorld() {

        ModelAndView mav = new ModelAndView(); // Creates a new ModelAndView object to hold the model and view
        mav.setViewName(""basic/helloWorld""); // Sets the view name to ""basic/helloWorld""
        mav.addObject(""message"", ""Hello World From Phuong!""); // Adds a model object with key ""message"" and value ""Hello World!""
        return mav; // Returns the ModelAndView object
    }
}",5,5,4,5
,38522382,"    public static Predicate hasTimeBeetween(final ZonedDateTime from, final ZonedDateTime to) {

        BooleanBuilder builder = new BooleanBuilder();
        builder.and(QMyDocument.myDocument.remoteTime.after(from));
        builder.and(QMyDocument.myDocument.remoteTime.before(to));

        return builder.getValue();
    }
","```java
public static Predicate hasTimeBeetween(final ZonedDateTime from, final ZonedDateTime to) {

    // Create a BooleanBuilder used for the final Predicate
    BooleanBuilder builder = new BooleanBuilder();

    // Filter the collection by remoteTime after the from parameter
    builder.and(QMyDocument.myDocument.remoteTime.after(from));

    // Filter the collection by remoteTime before the to parameter
    builder.and(QMyDocument.myDocument.remoteTime.before(to));

    // Return the Predicate from the BooleanBuilder
    return builder.getValue();
}
```",5,5,5,5
,24498483,"@Repository(""myFirstDao"")
@Transactional(value=""myTransactionManager"")
class FirstDaoImpl implements FirstDao
{
@PersistenceContext(unitName=""myUnit"")
EntityManager em;

           @Transactional(value=""myTransactionManager"")
           public FirstEntity save(FirstEntity entity)
           {
           return em.merge(entity);
           }

}
","@Repository(""myFirstDao"") // Specifies the Spring bean name for this class
@Transactional(value=""myTransactionManager"") // Marks the class as transactional
class FirstDaoImpl implements FirstDao // Implementation class of the FirstDao interface
{
    @PersistenceContext(unitName=""myUnit"") // Configures the EntityManager dependency injection
    EntityManager em; // Spring Bean, used to interact with the database

    @Transactional(value=""myTransactionManager"") // Marks this specific method as transactional
    public FirstEntity save(FirstEntity entity) // Saves an entity to the database and returns the updated entity
    {
        return em.merge(entity); // Merges the entity into the database and returns the updated entity
    }
}",5,4,5,5
,46518000,"Scanner scanner = new Scanner(System.in);
int x = scanner.nextInt();
int y = scanner.nextInt();
String function = scanner.next();
if (function == ""age"") {
    int sum = x + y;
    System.out.println(sum);
}
","Scanner scanner = new Scanner(System.in); // This line creates a Scanner object that will be used to read the user's input.
int x = scanner.nextInt(); // This line reads an integer from the user and stores it in the variable x.
int y = scanner.nextInt(); // This line reads an integer from the user and stores it in the variable y.
String function = scanner.next(); // This line reads a string from the user and stores it in the variable function.
if (function == ""age"") { // This line checks if the user entered the string ""age"".
    int sum = x + y; // This line calculates the sum of x and y and stores it in the variable sum.
    System.out.println(sum); // This line prints the value of sum to the console.
}",5,4,4,4
,41993286,"public class CoPrimetest {

    @Test
    public void testing() { 
       CoprimeNumbersTest instance = new CoprimeNumbersTest();
       boolean result = instance.isCoprime( 1, 1 );
       boolean expected = true;
       assertEquals( expected, result );
    }
}
","public class CoPrimetest {

    @Test
    public void testing() { 
        // Creating an instance of the CoprimeNumbersTest class
        CoprimeNumbersTest instance = new CoprimeNumbersTest(); 

        // Calling the isCoprime() method on the instance with inputs 1 and 1
        // The isCoprime() method checks if two numbers are coprime
        boolean result = instance.isCoprime( 1, 1 ); 

        // The expected result is true since 1 and 1 are coprime
        boolean expected = true; 

        // Asserting that the actual result matches the expected result
        assertEquals( expected, result ); 
    }
}",5,5,4,5
,64990448,"while (rs.next()) {
        int id = rs.getInt(""id"");
        if (nr == id) {   
            Ews x = new Ews(rs.getString(""datum""), rs.getInt(""systole""), rs.getInt(""diastole""), + 
            rs.getInt(""pols""), rs.getDouble(""temperatuur""));                 
            controles.add(x);
       }
}

Integer i = 1;
for (Ews controle : controles) {
     System.out.println(i  + "") "" + controle.getDate() + 
     "" - Bloeddruk: "" + controle.getSyst() + ""/"" + controle.getDiast() +
     "" - Pols: "" + controle.getPulse() + "" - Temperatuur: "" + controle.getTemp());
     i++;
}
","```java
while (rs.next()) {
        int id = rs.getInt(""id"");
        if (nr == id) { // Checking if the current row's id matches the specified id
            Ews x = new Ews(rs.getString(""datum""), rs.getInt(""systole""), rs.getInt(""diastole""),
                    rs.getInt(""pols""), rs.getDouble(""temperatuur"")); // Creating a new Ews object with the data from the current row
            controles.add(x); // Adding the new Ews object to the controles list
        }
}

Integer i = 1;
for (Ews controle : controles) {
     System.out.println(i  + "") "" + controle.getDate() +
             "" - Bloeddruk: "" + controle.getSyst() + ""/"" + controle.getDiast() +
             "" - Pols: "" + controle.getPulse() + "" - Temperatuur: "" + controle.getTemp());
     i++;
}
```",5,4,5,5
,19120226," JSONArray jr = new JSONArray(""jsonstring"");
 for(int i =0 ; i< jr.length();i++)
 {
 JSONObject jb =(JSONObject) jr.get(i);  
 String categoryid = jb.getString(""category_id"");
 String parent_id = jb.getString(""parent_id"");
 String name = jb.getString(""name"");
 }
","JSONArray jr = new JSONArray(""jsonstring""); //Create a JSONArray object from the given JSON string
for(int i =0 ; i< jr.length();i++) //Loop through each element of the JSONArray
{
  JSONObject jb =(JSONObject) jr.get(i);  //Get the ith JSON object from the JSONArray
  String categoryid = jb.getString(""category_id""); //Get the value of the ""category_id"" property
  String parent_id = jb.getString(""parent_id""); //Get the value of the ""parent_id"" property
  String name = jb.getString(""name""); //Get the value of the ""name"" property
}",5,5,5,5
,57413449,"@Configuration
public class Configuration {

    @Bean
    public LevelApprovalService getLevelApprovalService() {
        return LevelApprovalServiceImpl.getInstance();
    }

}
","```java
@Configuration  // This annotation is used to mark this class as a Spring configuration class
public class Configuration {

    // This method is annotated with @Bean, which tells Spring that it should create an instance of the LevelApprovalServiceImpl class
    // and register it as a bean in the application context.
    @Bean
    public LevelApprovalService getLevelApprovalService() {
        return LevelApprovalServiceImpl.getInstance();  // getInstance() is a static method that returns a singleton instance of the LevelApprovalServiceImpl class
    }

}
```",4,4,3,5
,15808715,"List<String> myList;
Collections.sort(myList, new Comparator<String>(){
    @Override
    public int compare(String o1, String o2) {
        String text1 = o1.split("":"")[7];
        String text2 = o2.split("":"")[7];
        return text1.compareTo(text2);
    }
}); 
","```java
List<String> myList; // A list of strings to be sorted.

// Sort the list using a custom comparator based on the eighth field separated by colons in each string.
Collections.sort(myList, new Comparator<String>() {
    @Override
    public int compare(String o1, String o2) {
        String text1 = o1.split("":"")[7]; // Extract the eighth field from the first string.
        String text2 = o2.split("":"")[7]; // Extract the eighth field from the second string.
        return text1.compareTo(text2); // Compare the extracted fields lexicographically.
    }
});
```",5,5,4,5
,52578295,"@FXML
private void settingApplyBtnAction(ActionEvent event) {

    paymentBtn.setRipplerFill(Color.valueOf(themeColor));

    /*other code....*/

}
","```java
@FXML
private void settingApplyBtnAction(ActionEvent event) {

    // Change the background color of the payment button to the specified theme color
    paymentBtn.setRipplerFill(Color.valueOf(themeColor));

    /*other code....*/

}
```",5,4,5,5
,62865787,"configurations.all {
        exclude module: 'okhttp-ws'
}

implementation 'com.squareup.okhttp3:okhttp:4.8.0'
implementation 'com.squareup.okhttp3:okhttp-ws:3.4.1'
testImplementation ""com.squareup.okhttp3:mockwebserver:4.8.0""
androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.8.0'
","```java
configurations.all {
    // Exclude the 'okhttp-ws' module from all configurations to avoid conflicts
    exclude module: 'okhttp-ws'
}

implementation 'com.squareup.okhttp3:okhttp:4.8.0'
implementation 'com.squareup.okhttp3:okhttp-ws:3.4.1'
testImplementation ""com.squareup.okhttp3:mockwebserver:4.8.0""
androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.8.0'
```",4,4,5,5
,40314445,"@Setter
@Getter
@Builder
public class MyData {
  private Long id;
  private String name;

  @Builder.Default
  private Status status = Status.NEW;
}
","```java
@Setter // Automatically generates setter methods for all fields
@Getter // Automatically generates getter methods for all fields
@Builder // Allows us to create instances with a builder pattern
public class MyData {
  private Long id;
  private String name;

  // Default value for 'status' field is 'NEW'
  @Builder.Default
  private Status status = Status.NEW;
}
```",5,4,4,5
,,,,,,,
,,,,,,,
Q4,58026958,"public class Agent {

    public static void premain(String agentArgs, Instrumentation inst) {
        inst.addTransformer(new ClassFileTransformer() {
            @Override
            public byte[] transform(ClassLoader classLoader, String s, Class<?> aClass, ProtectionDomain protectionDomain, byte[] bytes) throws IllegalClassFormatException {
                if (""your/package/Trade"".equals(s)) {
                    try {
                        ClassPool cp = ClassPool.getDefault();
                        CtClass ctClass = cp.get(""your.package.Trade"");
                        CtMethod commandMethod = ctClass.getDeclaredMethod(""log"");
                        commandMethod.setBody(""if (/* conditions */) {""
                            + ""    fw.write(sender + \"" [\"" + senderUser.getMoney() + \""/\"" + senderOldBal + \""] sent \"" + pay.getMoney() + \"" to \"" + receiver + \""[\"" + receiverOldBal + \""/\"" + receiverUser.getMoney() + \""]\"");""
                            + ""}"");
                        byte[] byteCode = ctClass.toBytecode();
                        ctClass.detach();
                        return byteCode;
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                return null;
            }
        });
    }

}
","```java
public class Agent {

    public static void premain(String agentArgs, Instrumentation inst) { // Instrumentation API is used for this Java agent to transform bytecode
        inst.addTransformer(new ClassFileTransformer() { // Add a transformer to modify bytecode on-the-fly
            @Override
            public byte[] transform(ClassLoader classLoader, String s, Class<?> aClass, ProtectionDomain protectionDomain, byte[] bytes) throws IllegalClassFormatException {
                if (""your/package/Trade"".equals(s)) { // Check if the transformed class is the target class
                    try {
                        ClassPool cp = ClassPool.getDefault(); // ASM API is used for bytecode manipulation
                        CtClass ctClass = cp.get(""your.package.Trade""); // Get the Trade class
                        CtMethod commandMethod = ctClass.getDeclaredMethod(""log""); // Get the log method
                        // Inject logging code into the log method
                        commandMethod.setBody(""if (/* conditions */) {\n"" +
                                ""    fw.write(sender + \"" [\"" + senderUser.getMoney() + \""/\"" + senderOldBal + \""] sent \"" + pay.getMoney() + \"" to \"" + receiver + \""[\"" + receiverOldBal + \""/\"" + receiverUser.getMoney() + \""]\"");\n"" +
                                ""}"");
                        byte[] byteCode = ctClass.toBytecode(); // Convert the modified class to bytecode
                        ctClass.detach(); // Release the modified class
                        return byteCode; // Return the modified bytecode
                    } catch (Exception ex) {
                        ex.printStackTrace(); // Log exception if anything goes wrong
                    }
                }
                return null; // Return original bytecode if the class is not the target class
            }
        });
    }

}
```",4,4,4,5
,28819604,"package com.example;

import org.junit.Assert;
import org.junit.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Question28819604 {

    @Test
    public void test() {
        Assert.assertEquals(37,convertSize(""X(37)""));
        Assert.assertEquals(4,convertSize(""9(03)""));
        Assert.assertEquals(15,convertSize(""X(15)""));
        Assert.assertEquals(8,convertSize(""9(07)""));
        Assert.assertEquals(1,convertSize(""X""));
        Assert.assertEquals(1,convertSize(""X(1)""));
        Assert.assertEquals(253,convertSize(""X(253)""));
        Assert.assertEquals(0,convertSize(""non-match""));
        Assert.assertEquals(0,convertSize(null));
        Assert.assertEquals(0,convertSize(""X(broken)""));
        Assert.assertEquals(0,convertSize(""X(broken""));
    }

    private Pattern xPattern = Pattern.compile(""X\\((\\d+)\\)"");
    private Pattern ninePattern = Pattern.compile(""9\\((\\d+)\\)"");

    private int convertSize(String pic) {
        if (pic == null) {
            return 0;
        }

        Matcher xPatternMatcher = xPattern.matcher(pic);
        Matcher ninePatternMatcher = ninePattern.matcher(pic);

        if (""X"".equals(pic)) {
            return 1;
        } else if (xPatternMatcher.matches()) {
            return Integer.parseInt(xPatternMatcher.group(1));
        } else if (ninePatternMatcher.matches()) {
            return Integer.parseInt(ninePatternMatcher.group(1)) + 1;
        } else {
            return 0;
        }
    }
}
","```java
package com.example;

import org.junit.Assert;
import org.junit.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Question28819604 {

    @Test
    public void test() {
        Assert.assertEquals(37,convertSize(""X(37)""));
        Assert.assertEquals(4,convertSize(""9(03)""));
        Assert.assertEquals(15,convertSize(""X(15)""));
        Assert.assertEquals(8,convertSize(""9(07)""));
        Assert.assertEquals(1,convertSize(""X""));
        Assert.assertEquals(1,convertSize(""X(1)""));
        Assert.assertEquals(253,convertSize(""X(253)""));
        Assert.assertEquals(0,convertSize(""non-match""));
        Assert.assertEquals(0,convertSize(null));
        Assert.assertEquals(0,convertSize(""X(broken)"")); // Invalid input
        Assert.assertEquals(0,convertSize(""X(broken"")); // Invalid input
    }

    private Pattern xPattern = Pattern.compile(""X\\((\\d+)\\)""); // Pattern to match ""X(<number>)""
    private Pattern ninePattern = Pattern.compile(""9\\((\\d+)\\)""); // Pattern to match ""9(<number>)""

    private int convertSize(String pic) {
        if (pic == null) { // Check if the input string is null
            return 0;
        }

        Matcher xPatternMatcher = xPattern.matcher(pic); // Create a matcher to match the input string against the X pattern
        Matcher ninePatternMatcher = ninePattern.matcher(pic); // Create a matcher to match the input string against the 9 pattern

        if (""X"".equals(pic)) { // Check if the input string is just ""X""
            return 1;
        } else if (xPatternMatcher.matches()) { // Check if the input string matches the X pattern
            return Integer.parseInt(xPatternMatcher.group(1)); // Extract and parse the number from the X pattern match
        } else if (ninePatternMatcher.matches()) { // Check if the input string matches the 9 pattern
            return Integer.parseInt(ninePatternMatcher.group(1)) + 1; // Extract and parse the number from the 9 pattern match and add 1
        } else { // If the input string does not match any of the patterns
            return 0;
        }
    }
}
```",5,4,5,5
,60600464,"static List<Integer> furthestAirport(int departingAirport) { 
    int max = 2;
    Set<Integer> result = new LinkedHashSet<>(); 

    for (int endKey : stationKeys) {
        if (departingAirport != endKey) {  

            Set<List<Integer>> tempHash = g.shortestPaths(departingAirport, endKey); 
            if (!tempHash.isEmpty()) { 
                for (List<Integer> tempList : tempHash) {

                    if( tempList.size() > max ) { 
                       result.clear();
                       result.add(endKey); 
                    } else if( tempList.size() == max ) { 
                       result.add(endKey); 
                    }
                }
            }
        }
    }

    return new ArrayList<>(result);
}
","```java
// Get the list of airport keys
static List<Integer> furthestAirport(int departingAirport) { 
    // Max depth for the shortest path search
    int max = 2; 
    // Set to store the furthest airports
    Set<Integer> result = new LinkedHashSet<>(); 

    // Iterate over all airports
    for (int endKey : stationKeys) {
        // Skip the departing airport
        if (departingAirport != endKey) {  

            // Get the shortest paths between the departing airport and the current airport
            Set<List<Integer>> tempHash = g.shortestPaths(departingAirport, endKey); 
            // If there are any shortest paths
            if (!tempHash.isEmpty()) { 
                // Iterate over the shortest paths
                for (List<Integer> tempList : tempHash) {
                    // If the current path is longer than the max depth
                    if( tempList.size() > max ) { 
                        // Clear the result set and add the current airport
                        result.clear();
                        result.add(endKey); 
                    } 
                    // If the current path is equal to the max depth
                    else if( tempList.size() == max ) { 
                        // Add the current airport to the result set
                        result.add(endKey); 
                    }
                }
            }
        }
    }

    return new ArrayList<>(result);
}
```",5,5,3,5
,64832416," try{

            String url = ""jdbc:mysql://localhost/sched"";
            Connection conn = DriverManager.getConnection(url,""root"","""");
            Statement stmt = conn.createStatement();
            String classification = comboClass.getSelectedItem().toString();
            String sqlSelect= ""select * from doctorsched where class = '""+classification+""'"";
            ResultSet rs = stmt.executeQuery(sqlSelect); 
            String finalText ="""";

        while(rs.next()){
             String docsName= rs.getString(""docName"");
             String room = rs.getString(""room"");
             String days = rs.getString(""day"");
             String from = rs.getString(""timefrom"");
             String to = rs.getString(""timeto"");

             finalText += (docsName+"" (room ""+room+"", ""+days+"", ""+from+""-""+to+"")\n"") ;
             finalText += ""<br>"";
               
        }
         jLabel10.setText(""<html>"" + finalText + ""</html>"");

} catch (Exception ex) {
  
    Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
}
","```java
// Establishing a connection to the specified MySQL database
try {
            String url = ""jdbc:mysql://localhost/sched"";
            Connection conn = DriverManager.getConnection(url, ""root"", """");
            Statement stmt = conn.createStatement();
            
            //Extracting the selected classification from the combobox
            String classification = comboClass.getSelectedItem().toString();
            
            // Constructing an SQL query to fetch doctor schedules based on the selected classification
            String sqlSelect = ""select * from doctorsched where class = '"" + classification + ""'"";
            ResultSet rs = stmt.executeQuery(sqlSelect);  // Executing the SQL query

            String finalText = """";  // Initializing a variable to store the formatted schedule

            while (rs.next()) {
                // Extracting the doctor's name, room, days, time from and time to from the result set
                String docsName = rs.getString(""docName"");
                String room = rs.getString(""room"");
                String days = rs.getString(""day"");
                String from = rs.getString(""timefrom"");
                String to = rs.getString(""timeto"");

                // Formatting the schedule information and appending it to the finalText variable
                finalText += (docsName + "" (room "" + room + "", "" + days + "", "" + from + ""-"" + to + "")\n"");
                finalText += ""<br>"";
            }
            // Setting the formatted schedule in the jLabel10 component
            jLabel10.setText(""<html>"" + finalText + ""</html>"");

} catch (Exception ex) {
    // Log any exceptions encountered during the process
    Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
}
```",5,5,4,5
,35058397,"private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         

    int c;
   c=Integer.parseInt ( jTextField2.getText()) ;

   jTextField1.setVisible(true );

   if(c>50)
   {
       jTextField1.setText(""A WARD"");

   }
   else 
        jTextField1.setText("" B WARD"");


   revalidate();
}      
","private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    // Gets the text from jTextField2, parses it into an integer, and stores it in variable c
    int c = Integer.parseInt(jTextField2.getText());

    // Sets jTextField1 to visible
    jTextField1.setVisible(true);

    // Checks if c is greater than 50
    if (c > 50) {
        // Sets the text of jTextField1 to ""A WARD""
        jTextField1.setText(""A WARD"");
    } else {
        // Sets the text of jTextField1 to ""B WARD""
        jTextField1.setText(""B WARD"");
    }

    // Revalidates the layout to display the changes
    revalidate();
}",4,4,4,4
,58612084,"@GetMapping(""/message/save"")
@CrossOrigin(origins = ""*"")
public void download(@RequestParam(""id"") Long id, HttpServletRequest request,
                     HttpServletResponse response) throws Exception {
    MessageEntity messageEntity = messageRepository.findById(id).orElseThrow(() -> new Exception(""Not found!""));
    String xml = new ObjectMapper().writeValueAsString(messageEntity);
    String fileName = ""message.zip"";
    String xml_name = ""message.xml"";
    byte[] data = xml.getBytes();
    byte[] bytes;
    try (ByteOutputStream fout = new ByteOutputStream();
         ZipOutputStream zout = new ZipOutputStream(fout)) {
        zout.setLevel(1);
        ZipEntry ze = new ZipEntry(xml_name);
        ze.setSize(data.length);
        zout.putNextEntry(ze);
        zout.write(data);
        zout.closeEntry();
        bytes = fout.getBytes();
    }
    response.setContentType(""application/zip"");
    response.setContentLength(bytes.length);
    response.setHeader(""Content-Disposition"",
            ""attachment; ""
                    + String.format(""filename*="" + StandardCharsets.UTF_8.name() + ""''%s"", fileName));
    ServletOutputStream outputStream = response.getOutputStream();
    FileCopyUtils.copy(bytes, outputStream);
    outputStream.close();
}
","@GetMapping(""/message/save"") // This is a GET mapping for ""/message/save"" endpoint
@CrossOrigin(origins = ""*"") // This allows cross-origin requests from any origin
public void download(@RequestParam(""id"") Long id, HttpServletRequest request,
                     HttpServletResponse response) throws Exception {

    // Find the message entity by its ID
    MessageEntity messageEntity = messageRepository.findById(id).orElseThrow(() -> new Exception(""Not found!""));

    // Convert the message entity to XML using Jackson
    String xml = new ObjectMapper().writeValueAsString(messageEntity);

    // Set the file name and XML file name
    String fileName = ""message.zip"";
    String xml_name = ""message.xml"";

    // Convert the XML string to bytes
    byte[] data = xml.getBytes();

    // Compress the data into a ZIP archive
    byte[] bytes;
    try (ByteOutputStream fout = new ByteOutputStream();
         ZipOutputStream zout = new ZipOutputStream(fout)) {
        zout.setLevel(1);
        ZipEntry ze = new ZipEntry(xml_name);
        // Set the size of the entry
        ze.setSize(data.length);
        // Add the entry to the archive
        zout.putNextEntry(ze);
        // Write the data to the archive
        zout.write(data);
        // Close the entry
        zout.closeEntry();
        // Get the bytes of the archive
        bytes = fout.getBytes();
    }

    // Set the response headers
    response.setContentType(""application/zip"");
    response.setContentLength(bytes.length);
    response.setHeader(""Content-Disposition"",
            ""attachment; ""
                    + String.format(""filename*="" + StandardCharsets.UTF_8.name() + ""''%s"", fileName));

    // Get the output stream for the response
    ServletOutputStream outputStream = response.getOutputStream();

    // Copy the archive bytes to the output stream
    FileCopyUtils.copy(bytes, outputStream);

    // Close the output stream
    outputStream.close();
}",5,5,4,4
,23712539,"

    System.out.println(""String 1"");


    try {
        Thread.sleep(1000);  
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

    System.out.println(""String 2"");



    for(int k = 10; k > 0; k--)
    {
        System.out.println(k);

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
","    System.out.println(""String 1""); //Prints ""String 1""

    try {
        Thread.sleep(1000); // Sleeps for 1 second
    } catch (InterruptedException e) {
        e.printStackTrace(); // Prints stack trace if thread is interrupted
    }

    System.out.println(""String 2""); // Prints ""String 2""

    for(int k = 10; k > 0; k--) // Loop from 10 to 1
    {
        System.out.println(k); // Prints the current value of k

        try {
            Thread.sleep(1000); // Sleeps for 1 second
        } catch (InterruptedException e) {
            e.printStackTrace(); // Prints stack trace if thread is interrupted
        }

    }",5,4,4,5
,2134840,"public class MyFrame extends JFrame {  
   public MyFrame() {
        super(""My Frame"");


        setContentPane(new DrawPane());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 400);
        setVisible(true); 
   }


   class DrawPane extends JPanel {
        public void paintComponent(Graphics g) {
            g.fillRect(20, 20, 100, 200); 
        }
   }

   public static void main(String args[]){
        new MyFrame();
   }
}
","```java
public class MyFrame extends JFrame {  
   // Constructor sets up the frame, adding a DrawPane and configuring the frame's behavior
   public MyFrame() {
        // Set the title of the frame
        super(""My Frame"");

        // Add a new DrawPane to the frame
        setContentPane(new DrawPane());

        // Configure the frame to exit when the close button is clicked
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set the size of the frame
        setSize(400, 400);

        // Make the frame visible
        setVisible(true); 
   }

   // Inner class DrawPane extends JPanel and overrides paintComponent to draw a rectangle
   class DrawPane extends JPanel {
        // Override the paintComponent method to draw a rectangle
        @Override
        public void paintComponent(Graphics g) {
            // Draw a filled rectangle with the specified bounds
            g.fillRect(20, 20, 100, 200); // Fills a rectangle with the specified bounds (x, y, width, height)
        }
   }

   // Main method creates and displays a MyFrame instance
   public static void main(String args[]){
        // Create a new MyFrame instance
        new MyFrame();
   }
}
```",4,4,4,5
,43245597,"public class Leave extends AppCompatActivity {

TextView date;
private DatePickerDialog datePickerDialog;
TextView date2;

private DatePickerDialog datePickerDialog2;
TextView no_of_days;
String date1 = """", date2 = """";


@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_leave);

    date = (TextView) findViewById(R.id.date);
    date2 = (TextView) findViewById(R.id.date2);

    no_of_days = (TextView) findViewById(R.id.no_of_days);
    RadioButton radio_full = (RadioButton) findViewById(R.id.radio_full);
    RadioButton radio_Half = (RadioButton) findViewById(R.id.radio_Half);
    RadioGroup radioGroup = (RadioGroup) findViewById(R.id.radioleave);
    radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
        @Override
        public void onCheckedChanged(RadioGroup radioGroup, int i) {
            int buttonId = radioGroup.getCheckedRadioButtonId();
            switch (buttonId) {
                case R.id.radio_full:
                    Toast.makeText(getApplicationContext(), ""You have selected Full Day Leave"", Toast.LENGTH_SHORT).show();
                    break;
                case R.id.radio_Half:
                    Toast.makeText(getApplicationContext(), ""You have selected Half Day Leave"", Toast.LENGTH_SHORT).show();
                    break;
            }
        }
    });


    radio_full.setVisibility(View.GONE);
    radio_Half.setVisibility(View.GONE);


    date = (TextView) findViewById(R.id.date);

    date.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {

            final Calendar c = Calendar.getInstance();
            int mYear = c.get(Calendar.YEAR); 
            int mMonth = c.get(Calendar.MONTH); 
            int mDay = c.get(Calendar.DAY_OF_MONTH); 

            datePickerDialog = new DatePickerDialog(Leave.this,
                    new DatePickerDialog.OnDateSetListener() {

                        @Override
                        public void onDateSet(DatePicker view, int year,
                                              int monthOfYear, int dayOfMonth) {


                            date1 = dayOfMonth + ""/""
                                    + (monthOfYear + 1) + ""/"" + year;

                            date.setText(dayOfMonth + ""/""
                                    + (monthOfYear + 1) + ""/"" + year);


                            if(!TextUtils.isEmpty(date2)) {


                                getDifferenceDays(date, date2);

                                if(date1.equals(date2)) {

                                   radio_full.setVisibility(View.VISIBLE);
                                   radio_Half.setVisibility(View.VISIBLE);
                                } else {

                                   radio_full.setVisibility(View.GONE);
                                   radio_Half.setVisibility(View.GONE);
                                }
                            }

                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog.show();
        }
    });


    date2 = (TextView) findViewById(R.id.date2);

    date2.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {

            final Calendar c = Calendar.getInstance();
            int mYear = c.get(Calendar.YEAR); 
            int mMonth = c.get(Calendar.MONTH); 
            int mDay = c.get(Calendar.DAY_OF_MONTH); 

            datePickerDialog2 = new DatePickerDialog(Leave.this,
                    new DatePickerDialog.OnDateSetListener() {

                        @Override
                        public void onDateSet(DatePicker view, int year,
                                              int monthOfYear, int dayOfMonth) {



                            date2 = dayOfMonth + ""/""
                                    + (monthOfYear + 1) + ""/"" + year;

                            date2.setText(dayOfMonth + ""/""
                                    + (monthOfYear + 1) + ""/"" + year);

                            if(!TextUtils.isEmpty(date1)) {


                                getDifferenceDays(date, date2);

                                if(date1.equals(date2)) {

                                   radio_full.setVisibility(View.VISIBLE);
                                   radio_Half.setVisibility(View.VISIBLE);
                                } else {

                                   radio_full.setVisibility(View.GONE);
                                   radio_Half.setVisibility(View.GONE);
                                }  
                            }

                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog2.show();

        }
    });

    no_of_days.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            SimpleDateFormat format = new SimpleDateFormat(""dd/mm/yyyy"");
            String date01 = date.getText().toString();
            String date02 = date2.getText().toString();
            try {
                Date d = format.parse(date01);
                Date d1 = format.parse(date02);
                getDifferenceDays(d, d1);
            } catch (ParseException e) {
                e.printStackTrace();
            }


        }
    });

    Spinner spinner = (Spinner) findViewById(R.id.spinner);

    ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
            R.array.leave_array, android.R.layout.simple_spinner_item);

adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

    spinner.setAdapter(adapter);
}
","public class Leave extends AppCompatActivity {

TextView date;
private DatePickerDialog datePickerDialog;
TextView date2;

private DatePickerDialog datePickerDialog2;
TextView no_of_days;
String date1 = """", date2 = """";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_leave);

    // Initialize TextViews for displaying dates and the number of days
    date = (TextView) findViewById(R.id.date);
    date2 = (TextView) findViewById(R.id.date2);
    no_of_days = (TextView) findViewById(R.id.no_of_days);
    
    // Initialize RadioButtons for full and half day leave options
    RadioButton radio_full = (RadioButton) findViewById(R.id.radio_full);
    RadioButton radio_Half = (RadioButton) findViewById(R.id.radio_Half);
    
    // Setup RadioGroup for leave type selection and handle changes
    RadioGroup radioGroup = (RadioGroup) findViewById(R.id.radioleave);
    radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
        @Override
        public void onCheckedChanged(RadioGroup radioGroup, int i) {
            int buttonId = radioGroup.getCheckedRadioButtonId();
            switch (buttonId) {
                case R.id.radio_full:
                    Toast.makeText(getApplicationContext(), ""You have selected Full Day Leave"", Toast.LENGTH_SHORT).show();
                    break;
                case R.id.radio_Half:
                    Toast.makeText(getApplicationContext(), ""You have selected Half Day Leave"", Toast.LENGTH_SHORT).show();
                    break;
            }
        }
    });

    // Initially hide the radio buttons for leave type
    radio_full.setVisibility(View.GONE);
    radio_Half.setVisibility(View.GONE);

    // Setup click listener for the start date TextView
    date.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            final Calendar c = Calendar.getInstance();
            int mYear = c.get(Calendar.YEAR); 
            int mMonth = c.get(Calendar.MONTH); 
            int mDay = c.get(Calendar.DAY_OF_MONTH); 

            // Initialize DatePickerDialog for selecting start date
            datePickerDialog = new DatePickerDialog(Leave.this,
                    new DatePickerDialog.OnDateSetListener() {
                        @Override
                        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                            date1 = dayOfMonth + ""/"" + (monthOfYear + 1) + ""/"" + year;
                            date.setText(date1); // Display selected start date

                            // Show or hide leave type options based on date selection
                            if (!TextUtils.isEmpty(date2.getText().toString())) {
                                // Assuming getDifferenceDays is a method to calculate the difference between two dates
                                getDifferenceDays(date1, date2.getText().toString()); 
                                radio_full.setVisibility(date1.equals(date2.getText().toString()) ? View.VISIBLE : View.GONE);
                                radio_Half.setVisibility(date1.equals(date2.getText().toString()) ? View.VISIBLE : View.GONE);
                            }
                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog.show();
        }
    });

    // Setup click listener for the end date TextView
    date2.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            final Calendar c = Calendar.getInstance();
            int mYear = c.get(Calendar.YEAR); 
            int mMonth = c.get(Calendar.MONTH); 
            int mDay = c.get(Calendar.DAY_OF_MONTH); 

            // Initialize DatePickerDialog for selecting end date
            datePickerDialog2 = new DatePickerDialog(Leave.this,
                    new DatePickerDialog.OnDateSetListener() {
                        @Override
                        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                            date2.setText(dayOfMonth + ""/"" + (monthOfYear + 1) + ""/"" + year); // Display selected end date

                            // Show or hide leave type options based on date selection
                            if (!TextUtils.isEmpty(date1)) {
                                getDifferenceDays(date1, date2.getText().toString()); // Calculate days difference
                                boolean isSameDay = date1.equals(date2.getText().toString());
                                radio_full.setVisibility(isSameDay ? View.VISIBLE : View.GONE);
                                radio_Half.setVisibility(isSameDay ? View.VISIBLE : View.GONE);
                            }
                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog2.show();
        }
    });

    // Setup click listener for calculating and displaying the number of leave days
    no_of_days.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            SimpleDateFormat format = new SimpleDateFormat(""dd/MM/yyyy"");
            try {
                Date d = format.parse(date.getText().toString());
                Date d1 = format.parse(date2.getText().toString());
                // Calculate and display the difference in days
                getDifferenceDays(d, d1);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
    });

    // Initialize Spinner for selecting the type of leave from a predefined list
    Spinner spinner = (Spinner) findViewById(R.id.spinner);
    ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.leave_array, android.R.layout.simple_spinner_item);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
}",5,4,4,5
,32379232,"import java.awt.*;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.Timer;


public class HelloWorldApplet extends javax.swing.JApplet {

    String greeting;

    Font myFont = new Font(""Times New Roman"", Font.BOLD, 20);

    public void init() {

        greeting = ""Hello World"";

        add(new MyPanel());

        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                repaint();

            }       
        };

        Timer timer = new Timer(500, actionListener);
        timer.start();


    }

    class MyPanel extends JPanel {

        public void paintComponent(Graphics screen) {

            super.paintComponent(screen);

            Calendar now = Calendar.getInstance();
            int second = now.get(Calendar.SECOND);
            int hour = now.get(Calendar.HOUR_OF_DAY);
            int minute = now.get(Calendar.MINUTE);
            int month = now.get(Calendar.MONTH) + 1;
            int day = now.get(Calendar.DAY_OF_MONTH);
            int year = now.get(Calendar.YEAR);

            String currentTime = (""The time currently is: "" + hour + "":"" + minute
                    + "" and "" + second + "" seconds"");
            String currentDate = (""Date: "" + month + ""/"" + day + ""/"" + year);

            setFont(myFont);

            Graphics2D screen2D = (Graphics2D) screen;
            screen2D.drawString(greeting, 20, 50);
            screen2D.drawString(currentTime, 20, 75);
            screen2D.drawString(currentDate, 20, 100);

        }

    }


}
","```java
import java.awt.*;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.Timer;


public class HelloWorldApplet extends javax.swing.JApplet {

    String greeting; // Greeting message

    // Custom font to be used for drawing text.
    Font myFont = new Font(""Times New Roman"", Font.BOLD, 20);

    public void init() {

        greeting = ""Hello World"";

        // Add the custom panel which draws the greeting and time/date.
        add(new MyPanel());

        ActionListener actionListener = new ActionListener() {
            @Override
            // Upon an event (timer firing), repaint the panel to update the time and date.
            public void actionPerformed(ActionEvent e) {
                repaint();
            }       
        };

        // Create and start a timer that fires every 500 milliseconds, triggering the ActionListener.
        Timer timer = new Timer(500, actionListener);
        timer.start();


    }

    class MyPanel extends JPanel {

        public void paintComponent(Graphics screen) {

            super.paintComponent(screen);

            Calendar now = Calendar.getInstance(); // Get the current date and time.

            int second = now.get(Calendar.SECOND);
            int hour = now.get(Calendar.HOUR_OF_DAY);
            int minute = now.get(Calendar.MINUTE);
            int month = now.get(Calendar.MONTH) + 1;
            int day = now.get(Calendar.DAY_OF_MONTH);
            int year = now.get(Calendar.YEAR);

            String currentTime = (""The time currently is: "" + hour + "":"" + minute
                    + "" and "" + second + "" seconds"");
            String currentDate = (""Date: "" + month + ""/"" + day + ""/"" + year);

            // Set the custom font for drawing text.
            setFont(myFont);

            Graphics2D screen2D = (Graphics2D) screen;
            screen2D.drawString(greeting, 20, 50); // Draw the greeting message.
            screen2D.drawString(currentTime, 20, 75); // Draw the current time.
            screen2D.drawString(currentDate, 20, 100); // Draw the current date. 

        }

    }


}
```",5,4,4,5
,58147514,"public static void main(String[] args) {
    int totalPrice = 0;
    int creditLimit;

    Scanner input = new Scanner(System.in);



    for (int i = 0; i < 5; i++) {
        System.out.println(""Enter total price of item: "");
        totalPrice += input.nextInt();
    }

    System.out.println(""Enter credit limit: "");
    creditLimit = input.nextInt();

    System.out.println(""The total cost of all items is: "" + totalPrice);
    System.out.println(""Your credit limit is : "" + creditLimit);
    System.out.println(""Evaluation result: "" + (totalPrice > creditLimit ? ""declined"" : ""approved""));
}
","```java
public static void main(String[] args) {
    int totalPrice = 0; // Initialize `totalPrice` to 0
    int creditLimit; // Declare `creditLimit`

    Scanner input = new Scanner(System.in); // Create a `Scanner` object for user input

    for (int i = 0; i < 5; i++) { // Loop to get total price of 5 items
        System.out.println(""Enter total price of item: ""); // Prompt user for item price
        totalPrice += input.nextInt(); // Add item price to `totalPrice`
    }

    System.out.println(""Enter credit limit: ""); // Prompt user for credit limit
    creditLimit = input.nextInt(); // Store credit limit

    System.out.println(""The total cost of all items is: "" + totalPrice); // Display `totalPrice`
    System.out.println(""Your credit limit is: "" + creditLimit); // Display `creditLimit`
    // Evaluate if `totalPrice` is greater than `creditLimit`
    System.out.println(""Evaluation result: "" + (totalPrice > creditLimit ? ""declined"" : ""approved""));
}
```",5,4,4,4
,50421117,"import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Stream;

public class Sample
{
    public static void main(String... arg)
    {        
        String path = ""somewhere"";

        Stream<Converter> stream = Stream.of(0, 15, 25, 30).map(
            new Function<Integer, Converter>()
            {
                int previous;
                boolean even = true;

                @Override
                public Converter apply(Integer current)
                {
                    Converter converter = even ? null : new Converter(path, previous, current);

                    even = !even;

                    previous = current;

                    return converter;
                }
            }).filter(Objects::nonNull);

        stream.forEach(System.out::println);
    }

    static class Converter
    {
        private final String path;
        private final int start;
        private final int end;

        Converter(String path, int start, int end)
        {

            this.path = path;
            this.start = start;
            this.end = end;
        }

        public String toString()
        {
            return String.format(""Converter[%s,%s,%s]"", path, start, end);
        }
    }
}
","```java
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Stream;

public class Sample
{
    public static void main(String... arg)
    {
        // Path to be used for creating converters
        String path = ""somewhere"";

        // Create a stream of Converter objects
        Stream<Converter> stream = Stream.of(0, 15, 25, 30).map(
            (Integer current) -> {  // Function to convert an Integer to a Converter
                int previous;       // Store the previous value
                boolean even = true; // Flag to indicate even/odd

                // Create a Converter object only for odd values
                Converter converter = even ? null : new Converter(path, previous, current);

                even = !even;    // Toggle the even/odd flag

                previous = current; // Update the previous value

                return converter; // Return the Converter object or null
            }).filter(Objects::nonNull); // Filter out null values

        // Print the Converter objects
        stream.forEach(System.out::println);
    }

    static class Converter
    {
        private final String path;
        private final int start;
        private final int end;

        Converter(String path, int start, int end)
        {
            this.path = path;
            this.start = start;
            this.end = end;
        }

        public String toString()
        {
            // Format the Converter object as a string
            return String.format(""Converter[%s,%s,%s]"", path, start, end);
        }
    }
}
```",4,3,4,4
,37754063,"table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        int selectedRow = table.convertRowIndexToModel(table.getSelectedRow());
        if (selectedRow > -1) {
            DefaultTableModel newModel = new DefaultTableModel();
            String rowName = ""Row: "" + selectedRow;
            newModel.setColumnIdentifiers(new Object[]{rowName});
            for (int i = 0; i < model.getColumnCount(); i++) {
                newModel.addRow(new Object[]{model.getValueAt(selectedRow, i)});
            }
            JTable newTable = new JTable(newModel) {
                @Override
                public Dimension getPreferredScrollableViewportSize() {
                    return new Dimension(140, 240);
                }
            };

            JOptionPane.showMessageDialog(f, new JScrollPane(newTable),
                rowName, JOptionPane.PLAIN_MESSAGE);
        }
    }
});
","```java
table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        // Convert the selected row index in the table to the model index
        int selectedRow = table.convertRowIndexToModel(table.getSelectedRow());

        // Check if a row is selected
        if (selectedRow > -1) {
            // Create a new table model for the selected row
            DefaultTableModel newModel = new DefaultTableModel();

            // Set the column header for the new table
            String rowName = ""Row: "" + selectedRow;
            newModel.setColumnIdentifiers(new Object[]{rowName});

            // Copy the data from the selected row in the original table to the new table
            for (int i = 0; i < model.getColumnCount(); i++) {
                newModel.addRow(new Object[]{model.getValueAt(selectedRow, i)});
            }

            // Create a new JTable using the new table model
            JTable newTable = new JTable(newModel) {
                @Override
                public Dimension getPreferredScrollableViewportSize() {
                    // Set the preferred size of the viewport for the new table
                    return new Dimension(140, 240);
                }
            };

            // Display the new table in a JOptionPane
            JOptionPane.showMessageDialog(f, new JScrollPane(newTable),
                    rowName, JOptionPane.PLAIN_MESSAGE);
        }
    }
});
```",5,5,5,4
,10270392,"public Set findRarest()
{
    Set<String> rarest = new HashSet<String>();

    int occurrence = Integer.MAX_VALUE;  
    for (Map.Entry<String,Integer> item : wcMap.entrySet())
    {
        if (item.getValue() == occurrence)
        {
            rarest.add(item.getKey());
        }
        else if ( item.getValue() < occurrence )
        {
            occurrence = item.getValue();
            rarest.clear();
            rarest.add(item.getKey());
        }
    }
    return rarest;
}
","public Set findRarest()
{
    // Set to store the words with the rarest occurrence
    Set<String> rarest = new HashSet<String>();

    // Initialize the initial minimum occurrence
    int occurrence = Integer.MAX_VALUE;  
    
    // Iterate over the word count map
    for (Map.Entry<String,Integer> item : wcMap.entrySet())
    {
        // If the current word has same occurrence as minimum occurrence, then add it to the rarest set
        if (item.getValue() == occurrence)
        {
            rarest.add(item.getKey());
        }
        // If the current word has lower occurrence than minimum occurrence, then
        // Clear the rarest set and add the current word as the rarest one
        else if ( item.getValue() < occurrence )
        {
            occurrence = item.getValue();
            rarest.clear();
            rarest.add(item.getKey());
        }
    }
    
    // Return the set of rarest words
    return rarest;
}",4,4,5,5
,13612021,"@Entity
public class User implements Serializable {

    @Id
    @GeneratedValue
    private Long id;

    private String username;
    private String password;
    private String firstname;
    private String lastname;
    private Date birthDate;
    private String email;
    private String profileImage;

    public User() {

    }

    public User(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;

    }



    @Column
    public getUsername() {
        return username;
    }

    @Column
    public getPassword() {
        return password;
    }

    @Column
    public getFirstname() {
        return firstname;
    }

    @Column
    public getLastname() {
        return lastname;
    }

    @Column
    @Temporal(TemporalType.TIME)
    public getBirthDate() {
        return birthDate;
    }

    @Column
    public getEmail() {
        return email;
    }

    @Column
    public getProfileImage() {
        return profileImage;
    }
}
","```java
@Entity // Specifies that this class is an entity and is mapped to a database table
public class User implements Serializable { // Serializable interface is used to aid in persistence

    @Id // Primary key for the table
    @GeneratedValue // Auto-generates unique values for the id column
    private Long id;

    private String username;
    private String password;
    private String firstname;
    private String lastname;
    private Date birthDate;
    private String email;
    private String profileImage;

    public User() { // Constructor with no arguments

    }

    public User(String username, String password, String email) { // Constructor with username, password, and email arguments
        this.username = username;
        this.password = password;
        this.email = email;

    }

    @Column // Specifies that the following fields are columns in the database table
    public getUsername() {
        return username;
    }

    @Column
    public getPassword() {
        return password;
    }

    @Column
    public getFirstname() {
        return firstname;
    }

    @Column
    public getLastname() {
        return lastname;
    }

    @Column
    @Temporal(TemporalType.TIME) // Specifies that the birthDate field is a DATE type in the database
    public getBirthDate() {
        return birthDate;
    }

    @Column
    public getEmail() {
        return email;
    }

    @Column
    public getProfileImage() {
        return profileImage;
    }
}
```",5,5,4,5
,26403422,"        ((ChannelExec)channel).setPty(true);
        ((ChannelExec)channel).setCommand(cmd);                        
        channel.setInputStream(null);
        ((ChannelExec)channel).setErrStream(System.err);             
        InputStream in=channel.getInputStream();
        OutputStream out = channel.getOutputStream();
        channel.connect();
        
        if (isCancel) {
            log.debug(""Search was canceled by user... "");                

            channel.setInputStream(null);                
            if (in != null) {
                in.close();
                in = null;
            }
            if (br != null) {
                br.close();
                br = null;
            }
            out.write(3);
            out.flush();
            try{Thread.sleep(1000);}catch(Exception ee){log.error(ee);}
        }
","        // Enable pseudo-terminal support for interactive sessions
        ((ChannelExec)channel).setPty(true);
        // Set the command to execute on the remote machine
        ((ChannelExec)channel).setCommand(cmd);                        
        // Null out the input stream for non-interactive sessions
        channel.setInputStream(null);
        // Redirect error output to the system error stream (e.g. console)
        ((ChannelExec)channel).setErrStream(System.err);             
        // Get the input stream for reading from the remote process
        InputStream in=channel.getInputStream();
        // Get the output stream for writing to the remote process
        OutputStream out = channel.getOutputStream();
        // Connect the channel to the remote machine
        channel.connect();
        
        // Check if the search was canceled by the user
        if (isCancel) {
            // Log a message indicating the search was canceled
            log.debug(""Search was canceled by user... "");                

            // Null out the input stream to prevent further reading
            channel.setInputStream(null);                
            // Close the input stream if it was previously set
            if (in != null) {
                in.close();
                in = null;
            }
            // Close the buffered reader if it was previously set
            if (br != null) {
                br.close();
                br = null;
            }
            // Write Ctrl+C to the output stream to terminate the remote process
            out.write(3);
            // Flush the output stream to ensure the Ctrl+C is sent
            out.flush();
            // Sleep for 1 second to allow the remote process to terminate
            try{Thread.sleep(1000);}catch(Exception ee){log.error(ee);}
        }",5,4,3,5
,25082728,"public enum ValidationStatus {
  SUCCESS, ERROR1, ERROR2
}

public class ValidationResult {

    private ValidationStatus status;
    private String errorMessage;

    public ValidationResult(ValidationStatus status, String errorMessage) {
        this.status = status;
        this.errorMessage = errorMessage;
    }

    public boolean isValid() {
        return status == ValidationStatus.SUCCESS;
    }

    public ValidationStatus getStatus() {
        return status;
    }

    public String getErrorMessage() {
        return errorMessage;
    }
}
","```java
public enum ValidationStatus {
  SUCCESS, ERROR1, ERROR2
}

public class ValidationResult {

    private ValidationStatus status;
    private String errorMessage;

    public ValidationResult(ValidationStatus status, String errorMessage) {
        // Set the validation status and error message
        this.status = status;
        this.errorMessage = errorMessage;
    }

    public boolean isValid() {
        // Check if the validation status is SUCCESS
        // Return true if it is, false otherwise
        return status == ValidationStatus.SUCCESS;
    }

    public ValidationStatus getStatus() {
        // Return the validation status
        return status;
    }

    public String getErrorMessage() {
        // Return the error message
        return errorMessage;
    }
}
```",5,5,4,5
,35701316,"class Distribution<T>{
    List<Double> probs = new ArrayList<>();
    List<T> events = new ArrayList<>();
    double sumProb;
    Random rand = new Random();

    Distribution(Map<T,Double> probs){
        for(T event : probs.keySet()){
            sumProb += probs.get(event);
            events.add(event);
            this.probs.add(probs.get(event));
        }
    }

    public T sample(){
        T value;
        double prob = rand.nextDouble()*sumProb;
        int i;
        for(i=0; prob>0; i++){
            prob-= probs.get(i);
        }
        return events.get(i-1);
    }
}
","```java
class Distribution<T>{
    List<Double> probs = new ArrayList<>(); // List of probabilities
    List<T> events = new ArrayList<>(); // List of events
    double sumProb; // Sum of probabilities
    Random rand = new Random(); // Random number generator

    Distribution(Map<T,Double> probs){ // Constructor that takes a map of events and probabilities
        for(T event : probs.keySet()){ // Iterate over the events
            sumProb += probs.get(event); // Add the probability of the event to the sum
            events.add(event); // Add the event to the list of events
            this.probs.add(probs.get(event)); // Add the probability to the list of probabilities
        }
    }

    public T sample(){ // Function to sample an event
        T value; // Variable to store the sampled event
        double prob = rand.nextDouble()*sumProb; // Generate a random number between 0 and the sum of probabilities
        int i; // Index of the event
        for(i=0; prob>0; i++){ // Iterate over the events
            prob-= probs.get(i); // Subtract the probability of the current event from the random number
        }
        return events.get(i-1); // Return the event at the index
    }
}
```",5,5,3,5
,49913277,"import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Label;
import java.util.Random;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;

class MVC_Controller{

    private MVC_Model model;
    private MVC_View view;

    MVC_Controller(MVC_View view,MVC_Model model) {
      this.model=model;
      this.view=view;

      view.getConfirmationButton().addActionListener(e -> confirmationButtonPressed());
      view.getNextButton().addActionListener(e -> setNewQuestion());
      setNewQuestion(); 
      view.setVisible();
    }

    private void confirmationButtonPressed() {
        model.setAnswer(view.getAnswer());
        if(model.isCorrectAnswer()) {
            view.setInfo(""Well done !"");
        }else {
            view.setInfo(""Wrong answer !"");
        }
    }

    private void setNewQuestion() {
        view.clear();
        model.newQuestion();
        view.setInfo(""Select button "");
        view.updateFromModel();
    }

       public static void main(String[] args) {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                MVC_Model model = new MVC_Model();
                MVC_View  view  = new MVC_View(model);
                new MVC_Controller(view, model);
            }
        });
    }
}

/*Model contains the information for the view and information from the view
 * as well as the logic.
 * The model is independent of the user interface.
 */
class MVC_Model {

    private int question,answer = 0;
    private Random rnd = new Random();

    MVC_Model() {
        newQuestion();
    }


    void newQuestion() {
        question = (rnd.nextInt(99) > 49)  ? 2 : 1 ;
        answer = 0;
    }

    int getQuestion() { return question;}
    int getAnswer()   { return answer;  }
    void setQuestion(int question) { this.question = question; }
    void setAnswer(int answer)     { this.answer = answer;     }
    boolean isCorrectAnswer()    { return question == answer;  }
}

/*View only contains the user interface part*/
class MVC_View {

    private MVC_Model model;
    private JTextField question = new JTextField(2);
    private JToggleButton button1 = new JToggleButton(""1""); 
    private JToggleButton button2 = new JToggleButton(""2"");
    private JButton confirm = new JButton(""Confirm"");
    private JButton next = new JButton(""Next"");
    private JLabel info = new JLabel();
    private JFrame frame;

    MVC_View(MVC_Model model){
        this.model = model;

        ButtonGroup bGroup = new ButtonGroup();   
        bGroup.add(button1);bGroup.add(button2);  

        JPanel topPanel = new JPanel(); 

        topPanel.add(new Label(""Question: "")); 
        topPanel.add(question); topPanel.add(button1);  topPanel.add(button2);
        topPanel.add(confirm); topPanel.add(next);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0)); 
        bottomPanel.add(new Label(""Information: "")); 
        bottomPanel.add(info);
        frame = new JFrame(""MVC Model Demo"");
        frame.add(topPanel, BorderLayout.NORTH); 
        frame.add(bottomPanel, BorderLayout.SOUTH); 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
    }

    void setInfo(String text)       { info.setText(text); }
    JButton getConfirmationButton() { return confirm; }
    JButton getNextButton()         { return next; }
    int getAnswer() {
        if(button1.isSelected()) {
            return 1;
        }else if (button2.isSelected()){
            return 2;
        }
        return 0; 
    }

    void clear() {
        button1.setSelected(false);
        button2.setSelected(false);
        question.setText("""");
        info.setText("""");
    }


    void updateFromModel() {
        question.setText(String.valueOf(model.getQuestion()));
    }

    void setVisible() { frame.setVisible(true); }
}
","import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Label;
import java.util.Random;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;

class MVC_Controller{

    private MVC_Model model;
    private MVC_View view;

    // Constructor for the controller
    MVC_Controller(MVC_View view,MVC_Model model) {
      this.model=model;
      this.view=view;

      // Add listener to the confirmation button to handle when it's clicked
      view.getConfirmationButton().addActionListener(e -> confirmationButtonPressed());

      // Add listener to the next button to handle when it's clicked
      view.getNextButton().addActionListener(e -> setNewQuestion());

      // Set the initial question
      setNewQuestion(); 
      
      // Make the view visible
      view.setVisible();
    }

    private void confirmationButtonPressed() {
        // Set the answer based on the user's selection
        model.setAnswer(view.getAnswer());

        // Check if the answer is correct
        if(model.isCorrectAnswer()) {
            // Display a confirmation message
            view.setInfo(""Well done !"");
        }else {
            // Display an error message
            view.setInfo(""Wrong answer !"");
        }
    }

    private void setNewQuestion() {
        // Clear the user interface
        view.clear();

        // Generate a new question
        model.newQuestion();

        // Display a message to the user
        view.setInfo(""Select button "");

        // Update the view with the new question
        view.updateFromModel();
    }

    public static void main(String[] args) {
        // Run the application in a separate thread to avoid blocking the main thread
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Create the model and view objects
                MVC_Model model = new MVC_Model();
                MVC_View  view  = new MVC_View(model);

                // Create the controller object
                new MVC_Controller(view, model);
            }
        });
    }
}

/*Model contains the information for the view and information from the view
 * as well as the logic.
 * The model is independent of the user interface.
 */
class MVC_Model {

    private int question,answer = 0;
    private Random rnd = new Random();

    MVC_Model() {
        // Generate a new question when the object is created
        newQuestion();
    }

    // Generate a new question
    void newQuestion() {
        // Generate a random number between 1 and 2
        question = (rnd.nextInt(99) > 49)  ? 2 : 1 ;

        // Reset the answer
        answer = 0;
    }

    // Getters and setters for the question and answer
    int getQuestion() { return question;}
    int getAnswer()   { return answer;  }
    void setQuestion(int question) { this.question = question; }
    void setAnswer(int answer)     { this.answer = answer;     }

    // Check if the given answer is correct
    boolean isCorrectAnswer()    { return question == answer;  }
}

/*View only contains the user interface part*/
class MVC_View {

    private MVC_Model model;
    private JTextField question = new JTextField(2);
    private JToggleButton button1 = new JToggleButton(""1""); 
    private JToggleButton button2 = new JToggleButton(""2"");
    private JButton confirm = new JButton(""Confirm"");
    private JButton next = new JButton(""Next"");
    private JLabel info = new JLabel();
    private JFrame frame;

    MVC_View(MVC_Model model){
        this.model = model;

        // Create a button group for the toggle buttons
        ButtonGroup bGroup = new ButtonGroup();   
        bGroup.add(button1);bGroup.add(button2);  

        JPanel topPanel = new JPanel(); 

        // Add components to the top panel
        topPanel.add(new Label(""Question: "")); 
        topPanel.add(question); topPanel.add(button1);  topPanel.add(button2);
        topPanel.add(confirm); topPanel.add(next);

        JPanel bottomPanel = new JPanel();
        // Set the layout for the bottom panel
        bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0)); 
        // Add components to the bottom panel
        bottomPanel.add(new Label(""Information: "")); 
        bottomPanel.add(info);

        // Create and configure the main frame
        frame = new JFrame(""MVC Model Demo"");
        frame.add(topPanel, BorderLayout.NORTH); // Add the top panel to the north of the frame
        frame.add(bottomPanel, BorderLayout.SOUTH); // Add the bottom panel to the south of the frame
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
    }

    // Set the information text
    void setInfo(String text)       { info.setText(text); }

    // Get the confirmation button
    JButton getConfirmationButton() { return confirm; }

    // Get the next button
    JButton getNextButton()         { return next; }

    // Get the user's answer
    int getAnswer() {
        // Check which toggle button is selected and return the corresponding value
        if(button1.isSelected()) {
            return 1;
        }else if (button2.isSelected()){
            return 2;
        }
        return 0; 
    }

    // Clear the user interface
    void clear() {
        // Unselect both toggle buttons
        button1.setSelected(false);
        button2.setSelected(false);

        // Clear the question text field
        question.setText("""");

        // Clear the information text
        info.setText("""");
    }

    // Update the view with the new question from the model
    void updateFromModel() {
        // Set the question text field with the new question
        question.setText(String.valueOf(model.getQuestion()));
    }

    // Make the view visible
    void setVisible() { frame.setVisible(true); }
}",5,5,4,5
,10858585,"boolean mouseDown = false;

public boolean onTouchEvent(MotionEvent event) 
{
    switch(event.getAction() &amp; MotionEvent.ACTION_MASK)
    {
    case MotionEvent.ACTION_UP:
    {
        if(mouseDown)
        {
            ToggleSelection();
            invalidate();
            mouseDown = false;
        }
        break;
    }
    case MotionEvent.ACTION_OUTSIDE:
    case MotionEvent.ACTION_CANCEL:
    case MotionEvent.ACTION_POINTER_DOWN:
    case MotionEvent.ACTION_POINTER_UP:
    {
        mouseDown = false;
        break;
    }
    case MotionEvent.ACTION_DOWN:
    {
        mouseDown = true;
        return true;
    }
    }
    return false;
}
","```java
boolean mouseDown = false;

public boolean onTouchEvent(MotionEvent event) {
    switch (event.getAction() & MotionEvent.ACTION_MASK) {

        case MotionEvent.ACTION_UP:
            // When the user releases the mouse, check if it was previously clicked
            if (mouseDown) {
                ToggleSelection(); // Perform an action
                invalidate(); // Redraw the screen
                mouseDown = false; // Reset mouseDown to indicate that the mouse is not clicked
            }
            break;

        case MotionEvent.ACTION_OUTSIDE:
        case MotionEvent.ACTION_CANCEL:
        case MotionEvent.ACTION_POINTER_DOWN:
        case MotionEvent.ACTION_POINTER_UP:
            // For other events, reset mouseDown to indicate that the mouse is not clicked
            mouseDown = false;
            break;

        case MotionEvent.ACTION_DOWN:
            // When the user clicks the mouse, set mouseDown to true to indicate that it is clicked
            mouseDown = true;
            // Return true to indicate that the event has been handled
            return true;
    }

    // If none of the above events were handled, return false to indicate that the event was not handled
    return false;
}
```",4,4,4,5
,3962911,"package com.common.security.pgp;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Date;
import java.util.Iterator;

import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPCompressedData;
import org.bouncycastle.openpgp.PGPCompressedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPEncryptedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedDataList;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPLiteralData;
import org.bouncycastle.openpgp.PGPLiteralDataGenerator;
import org.bouncycastle.openpgp.PGPObjectFactory;
import org.bouncycastle.openpgp.PGPPrivateKey;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyEncryptedData;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPSecretKey;
import org.bouncycastle.openpgp.PGPSecretKeyRingCollection;
import org.bouncycastle.openpgp.PGPUtil;

/**
 * Simple routine to encrypt and decrypt using a Public and Private key with passphrase. This service
 * routine provides the basic PGP services between byte arrays.
 * 
 */
public class PgpEncryption {


    private static PGPPrivateKey findSecretKey(
            PGPSecretKeyRingCollection pgpSec, long keyID, char[] pass)
            throws PGPException, NoSuchProviderException {
        PGPSecretKey pgpSecKey = pgpSec.getSecretKey(keyID);

        if (pgpSecKey == null) {
            return null;
        }

        return pgpSecKey.extractPrivateKey(pass, ""BC"");
    }

    /**
     * decrypt the passed in message stream
     * 
     * @param encrypted
     *            The message to be decrypted.
     * @param passPhrase
     *            Pass phrase (key)
     * 
     * @return Clear text as a byte array. I18N considerations are not handled
     *         by this routine
     * @exception IOException
     * @exception PGPException
     * @exception NoSuchProviderException
     */
    public static byte[] decrypt(byte[] encrypted, InputStream keyIn, char[] password)
            throws IOException, PGPException, NoSuchProviderException {
        InputStream in = new ByteArrayInputStream(encrypted);

        in = PGPUtil.getDecoderStream(in);

        PGPObjectFactory pgpF = new PGPObjectFactory(in);
        PGPEncryptedDataList enc = null;
        Object o = pgpF.nextObject();




        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else {
            enc = (PGPEncryptedDataList) pgpF.nextObject();
        }






        Iterator it = enc.getEncryptedDataObjects();
        PGPPrivateKey sKey = null;
        PGPPublicKeyEncryptedData pbe = null;
        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(
                PGPUtil.getDecoderStream(keyIn));

        while (sKey == null &amp;&amp; it.hasNext()) {
            pbe = (PGPPublicKeyEncryptedData) it.next();

            sKey = findSecretKey(pgpSec, pbe.getKeyID(), password);
        }

        if (sKey == null) {
            throw new IllegalArgumentException(
                    ""secret key for message not found."");
        }

        InputStream clear = pbe.getDataStream(sKey, ""BC"");



        PGPObjectFactory pgpFact = new PGPObjectFactory(clear);

        PGPCompressedData cData = (PGPCompressedData) pgpFact.nextObject();

        pgpFact = new PGPObjectFactory(cData.getDataStream());

        PGPLiteralData ld = (PGPLiteralData) pgpFact.nextObject();

        InputStream unc = ld.getInputStream();

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int ch;

        while ((ch = unc.read()) >= 0) {
            out.write(ch);

        }

        byte[] returnBytes = out.toByteArray();
        out.close();
        return returnBytes;
    }

    /**
     * Simple PGP encryptor between byte[].
     * 
     * @param clearData
     *            The test to be encrypted
     * @param passPhrase
     *            The pass phrase (key). This method assumes that the key is a
     *            simple pass phrase, and does not yet support RSA or more
     *            sophisiticated keying.
     * @param fileName
     *            File name. This is used in the Literal Data Packet (tag 11)
     *            which is really inly important if the data is to be related to
     *            a file to be recovered later. Because this routine does not
     *            know the source of the information, the caller can set
     *            something here for file name use that will be carried. If this
     *            routine is being used to encrypt SOAP MIME bodies, for
     *            example, use the file name from the MIME type, if applicable.
     *            Or anything else appropriate.
     * 
     * @param armor
     * 
     * @return encrypted data.
     * @exception IOException
     * @exception PGPException
     * @exception NoSuchProviderException
     */
    public static byte[] encrypt(byte[] clearData, PGPPublicKey encKey,
            String fileName,boolean withIntegrityCheck, boolean armor)
            throws IOException, PGPException, NoSuchProviderException {
        if (fileName == null) {
            fileName = PGPLiteralData.CONSOLE;
        }

        ByteArrayOutputStream encOut = new ByteArrayOutputStream();

        OutputStream out = encOut;
        if (armor) {
            out = new ArmoredOutputStream(out);
        }

        ByteArrayOutputStream bOut = new ByteArrayOutputStream();

        PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(
                PGPCompressedDataGenerator.ZIP);
        OutputStream cos = comData.open(bOut); 

        PGPLiteralDataGenerator lData = new PGPLiteralDataGenerator();




        OutputStream pOut = lData.open(cos, 
                PGPLiteralData.BINARY, fileName, 
                clearData.length, 
                new Date() 
                );
        pOut.write(clearData);

        lData.close();
        comData.close();

        PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(
                PGPEncryptedData.CAST5, withIntegrityCheck, new SecureRandom(),
                ""BC"");

        cPk.addMethod(encKey);

        byte[] bytes = bOut.toByteArray();

        OutputStream cOut = cPk.open(out, bytes.length);

        cOut.write(bytes); 

        cOut.close();

        out.close();

        return encOut.toByteArray();
    }

    private static PGPPublicKey readPublicKey(InputStream in)
            throws IOException, PGPException {
        in = PGPUtil.getDecoderStream(in);

        PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(in);










        Iterator rIt = pgpPub.getKeyRings();

        while (rIt.hasNext()) {
            PGPPublicKeyRing kRing = (PGPPublicKeyRing) rIt.next();
            Iterator kIt = kRing.getPublicKeys();

            while (kIt.hasNext()) {
                PGPPublicKey k = (PGPPublicKey) kIt.next();

                if (k.isEncryptionKey()) {
                    return k;
                }
            }
        }

        throw new IllegalArgumentException(
                ""Can't find encryption key in key ring."");
    }

    public static byte[] getBytesFromFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);


        long length = file.length();

        if (length > Integer.MAX_VALUE) {

        }


        byte[] bytes = new byte[(int)length];


        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               &amp;&amp; (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }


        if (offset < bytes.length) {
            throw new IOException(""Could not completely read file ""+file.getName());
        }


        is.close();
        return bytes;
    }

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());


        byte[] original = ""Hello world"".getBytes();
        System.out.println(""Starting PGP test"");

        FileInputStream pubKey = new FileInputStream(""/Users/me/pub.key"");
        byte[] encrypted = encrypt(original, readPublicKey(pubKey), null,
                true, true);

        FileOutputStream dfis = new FileOutputStream(""/Users/me/enc.asc"");
        dfis.write(encrypted);
        dfis.close();

        byte[] encFromFile = getBytesFromFile(new File(""/Users/me/enc.asc""));
        FileInputStream secKey = new FileInputStream(""/Users/me/sec.key"");

        System.out.println(""\nencrypted data = '"" + new String(encrypted) + ""'"");

        byte[] decrypted = decrypt(encFromFile, secKey, ""passphrase"".toCharArray());

        System.out.println(""\ndecrypted data = '"" + new String(decrypted) + ""'"");


    }
}
","package com.common.security.pgp;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Date;
import java.util.Iterator;

import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPCompressedData;
import org.bouncycastle.openpgp.PGPCompressedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPEncryptedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedDataList;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPLiteralData;
import org.bouncycastle.openpgp.PGPLiteralDataGenerator;
import org.bouncycastle.openpgp.PGPObjectFactory;
import org.bouncycastle.openpgp.PGPPrivateKey;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyEncryptedData;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPSecretKey;
import org.bouncycastle.openpgp.PGPSecretKeyRingCollection;
import org.bouncycastle.openpgp.PGPUtil;

public class PgpEncryption {

    private static PGPPrivateKey findSecretKey(PGPSecretKeyRingCollection pgpSec, long keyID, char[] pass)
            throws PGPException, NoSuchProviderException {
        // Extract private key using passphrase
        PGPSecretKey pgpSecKey = pgpSec.getSecretKey(keyID);
        if (pgpSecKey == null) {
            return null;
        }
        return pgpSecKey.extractPrivateKey(pass, ""BC"");
    }

    public static byte[] decrypt(byte[] encrypted, InputStream keyIn, char[] password)
            throws IOException, PGPException, NoSuchProviderException {
        // Decode and prepare encrypted data for decryption
        InputStream in = PGPUtil.getDecoderStream(new ByteArrayInputStream(encrypted));
        PGPObjectFactory pgpF = new PGPObjectFactory(in);
        Object o = pgpF.nextObject();

        PGPEncryptedDataList enc;
        // Handle possible PGPEncryptedDataList directly or nested within another object
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else {
            enc = (PGPEncryptedDataList) pgpF.nextObject();
        }

        // Iterate through encrypted data objects to find matching secret key
        Iterator it = enc.getEncryptedDataObjects();
        PGPPrivateKey sKey = null;
        PGPPublicKeyEncryptedData pbe = null;
        PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyIn));

        while (sKey == null && it.hasNext()) {
            pbe = (PGPPublicKeyEncryptedData) it.next();
            sKey = findSecretKey(pgpSec, pbe.getKeyID(), password);
        }
        if (sKey == null) {
            throw new IllegalArgumentException(""Secret key for message not found."");
        }

        // Decrypt data stream
        InputStream clear = pbe.getDataStream(sKey, ""BC"");
        PGPObjectFactory pgpFact = new PGPObjectFactory(clear);

        // Handle compressed data and extract literal data
        PGPCompressedData cData = (PGPCompressedData) pgpFact.nextObject();
        pgpFact = new PGPObjectFactory(cData.getDataStream());
        PGPLiteralData ld = (PGPLiteralData) pgpFact.nextObject();

        // Extract data from literal data object
        InputStream unc = ld.getInputStream();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int ch;
        while ((ch = unc.read()) >= 0) {
            out.write(ch);
        }

        byte[] returnBytes = out.toByteArray();
        return returnBytes;
    }

    public static byte[] encrypt(byte[] clearData, PGPPublicKey encKey, String fileName, boolean withIntegrityCheck, boolean armor)
            throws IOException, PGPException, NoSuchProviderException {
        if (fileName == null) {
            fileName = PGPLiteralData.CONSOLE; // Default file name if none provided
        }

        ByteArrayOutputStream encOut = new ByteArrayOutputStream();
        OutputStream out = armor ? new ArmoredOutputStream(encOut) : encOut;

        // Compress clear data
        PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(PGPCompressedDataGenerator.ZIP);
        OutputStream cos = comData.open(new ByteArrayOutputStream());

        // Generate literal data
        PGPLiteralDataGenerator lData = new PGPLiteralDataGenerator();
        OutputStream pOut = lData.open(cos, PGPLiteralData.BINARY, fileName, clearData.length, new Date());
        pOut.write(clearData);

        // Encrypt compressed data
        PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(PGPEncryptedData.CAST5, withIntegrityCheck, new SecureRandom(), ""BC"");
        cPk.addMethod(encKey);

        byte[] bytes = ((ByteArrayOutputStream)cos).toByteArray();
        OutputStream cOut = cPk.open(out, bytes.length);
        cOut.write(bytes); // Final encryption output

        return encOut.toByteArray();
    }

    private static PGPPublicKey readPublicKey(InputStream in) throws IOException, PGPException {
        // Decode and load public key ring collection
        PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(PGPUtil.getDecoderStream(in));

        // Search for first encryption key in the public key ring collection
        Iterator rIt = pgpPub.getKeyRings();
        while (rIt.hasNext()) {
            PGPPublicKeyRing kRing = (PGPPublicKeyRing) rIt.next();
            Iterator kIt = kRing.getPublicKeys();
            while (kIt.hasNext()) {
                PGPPublicKey k = (PGPPublicKey) kIt.next();
                if (k.isEncryptionKey()) {
                    return k;
                }
            }
        }

        throw new IllegalArgumentException(""Can't find encryption key in key ring."");
    }

    public static byte[] getBytesFromFile(File file) throws IOException {
        // Read file into byte array
        InputStream is = new FileInputStream(file);
        long length = file.length();
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }

        byte[] bytes = new byte[(int)length];
        int offset = 0;
        int numRead;
        while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
            offset += numRead;
        }

        if (offset < bytes.length) {
            throw new IOException(""Could not completely read file "" + file.getName());
        }

        return bytes;
    }

    public static void main(String[] args) throws Exception {
        // Add Bouncy Castle as a Security Provider
        Security.addProvider(new BouncyCastleProvider());

        // Example encryption and decryption
        byte[] original = ""Hello world"".getBytes();
        FileInputStream pubKey = new FileInputStream(""/Users/me/pub.key"");
        byte[] encrypted = encrypt(original, readPublicKey(pubKey), null, true, true);
        FileOutputStream dfis = new FileOutputStream(""/Users/me/enc.asc"");
        dfis.write(encrypted);
        dfis.close();

        byte[] encFromFile = getBytesFromFile(new File(""/Users/me/enc.asc""));
        FileInputStream secKey = new FileInputStream(""/Users/me/sec.key"");
        byte[] decrypted = decrypt(encFromFile, secKey, ""passphrase"".toCharArray());

        System.out.println(""Decrypted data = '"" + new String(decrypted) + ""'"");
    }
}",5,5,4,5
,56747595,"        reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {

                    String text1 = (String) singleSnapshot.child(""Text1"").getValue();
                    String text2 = (String) singleSnapshot.child(""Text2"").getValue();
                    ArrayList<Item> arr = new ArrayList<Item>();
                    arr.add(new Item(text1, text2));

                    RecyclerViewAdapter adapter = new RecyclerViewAdapter(getContext(), arr);
                    RecyclerView recyclerView = view.findViewById(R.id.dashboardRecyclerView);

                    recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
                    recyclerView.setAdapter(adapter);
                }
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
            }
        });
","        reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                // Iterate over the children of the snapshot to get each item's data
                for (DataSnapshot singleSnapshot : dataSnapshot.getChildren()) {

                    // Get the value of the ""Text1"" child for the current item
                    String text1 = (String) singleSnapshot.child(""Text1"").getValue();

                    // Get the value of the ""Text2"" child for the current item
                    String text2 = (String) singleSnapshot.child(""Text2"").getValue();

                    // Create a new item with the retrieved data
                    ArrayList<Item> arr = new ArrayList<Item>();
                    arr.add(new Item(text1, text2));

                    // Create an adapter for the RecyclerView with the list of items
                    RecyclerViewAdapter adapter = new RecyclerViewAdapter(getContext(), arr);

                    // Set the layout manager and adapter for the RecyclerView
                    RecyclerView recyclerView = view.findViewById(R.id.dashboardRecyclerView);
                    recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
                    recyclerView.setAdapter(adapter);
                }
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
            }
        });",5,5,4,5
,20993845,"String sql2 = ""select entryDt,Student_Name,Class_Div_Name,ReceiptNo from test where ReceiptNo = ?"";
PreparedStatement stat = con.prepareStatement(sql2);

try {
    while (obt.hasNext()) {
        try {
            Object itrvalue = obt.next();
            System.out.println(""Receipt No --"" + itrvalue);
            stat.setObject(1, itrvalue);
            rs = stat.executeQuery();
            rs.next();
            Date datevalue = rs.getDate(1);
            String name = rs.getString(2);
            String CDN = rs.getString(3);
            String RNO = rs.getString(4);
            System.out.println(""Date is ---"" + datevalue);
            System.out.println(""Student Name ---"" + name);
            System.out.println(""Coloumn Div No ---"" + CDN);
            System.out.println(""Receipt No ---"" + RNO);
            rs.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
} finally {
    if (stat != null) {
        stat.close();
    }
}       
","String sql2 = ""select entryDt,Student_Name,Class_Div_Name,ReceiptNo from test where ReceiptNo = ?"";
// This line creates a prepared statement that will be used to execute the SQL query.
PreparedStatement stat = con.prepareStatement(sql2);

try {
    while (obt.hasNext()) {
        // This loop iterates through the results of the previous query and prints out the values of the columns.
        try {
            Object itrvalue = obt.next();
            System.out.println(""Receipt No --"" + itrvalue);
            // This line sets the value of the first parameter of the prepared statement to the value of itrvalue.
            stat.setObject(1, itrvalue);
            // This line executes the prepared statement and stores the results in the ResultSet object rs.
            rs = stat.executeQuery();
            // This line moves the cursor to the first row of the ResultSet object.
            rs.next();
            Date datevalue = rs.getDate(1);
            String name = rs.getString(2);
            String CDN = rs.getString(3);
            String RNO = rs.getString(4);
            System.out.println(""Date is ---"" + datevalue);
            System.out.println(""Student Name ---"" + name);
            System.out.println(""Coloumn Div No ---"" + CDN);
            System.out.println(""Receipt No ---"" + RNO);
            // This line closes the ResultSet object.
            rs.close();
        } catch (Exception ex) {
            // This catch block catches any exceptions that are thrown by the try block and prints out the stack trace.
            ex.printStackTrace();
        }
    }
} finally {
    // This finally block ensures that the prepared statement is closed even if an exception is thrown.
    if (stat != null) {
        stat.close();
    }
}",5,5,5,5
,40299023,"JButton btnCompute = new JButton(""Compute"");
public void handleAction() {
    btnCompute.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            try {

                int n1 = 5;
                int n2 = 4;
                int minValue = minFunction(n1, n2);

            }

            catch (NumberFormatException ex) {

            }
        }
    });
}
public int minFunction(int n1, int n2) {
    int min;
    if (n1 > n2)
        min = n2;
    else min = n1;

    return min;
}
","JButton btnCompute = new JButton(""Compute""); // Creates a button with the label ""Compute"".
public void handleAction() {
    btnCompute.addActionListener(new ActionListener() { // Adds an action listener to the button.
        public void actionPerformed(ActionEvent e) { // Defines the action to be performed when the button is clicked.
            try { // Encloses the code in a try block to handle exceptions.

                int n1 = 5; // Initializes variable n1 with the value 5.
                int n2 = 4; // Initializes variable n2 with the value 4.
                int minValue = minFunction(n1, n2); // Calls the minFunction() to calculate the minimum value.

            }

            catch (NumberFormatException ex) { // Catches the NumberFormatException if it occurs.

            }
        }
    });
}
public int minFunction(int n1, int n2) { // Defines the minFunction() to calculate the minimum value.
    int min; // Declares an integer variable min.
    if (n1 > n2) // Checks if n1 is greater than n2.
        min = n2; // Assigns the value of n2 to min if n1 is greater than n2.
    else min = n1; // Assigns the value of n1 to min if n1 is not greater than n2.

    return min; // Returns the minimum value.
}",5,3,4,4
,44796705,"@XmlRootElement(name = ""name"")
public class Name {

    private String value;

    public void setValue(String value){

        this.value = value;
    }

    @XmlAttribute
    public String getValue(){

        return value;

    }

}
","@XmlRootElement(name = ""name"") // This annotation is used to specify the XML root element name for this class.
public class Name {

    private String value;

    public void setValue(String value){ // This method is used to set the value of the ""value"" property.

        this.value = value;
    }

    @XmlAttribute // This annotation is used to specify that the ""value"" property should be mapped to an XML attribute.
    public String getValue(){ // This method is used to get the value of the ""value"" property.

        return value;

    }

}",5,5,4,5
,20829871,"@Override public boolean equals(Object o) {
    if(o == this) return true;
    if(!(o instanceof MyDateClass)) return false;
    MyDateClass that = (MyDateClass) o;




    return this.ivar1 == that.ivar2 &amp;&amp;
           this.ivar2 == that.ivar2; 
}


@Override public int hashCode() {
    int result = 17;
    result = 31 * result + ivar1;
    result = 31 * result + ivar2;
    return result;
}
","@Override
public boolean equals(Object o) {
    // Checks if the reference is equal to this object
    if (o == this)
        return true;
    // Check if the object is an instance of the MyDateClass type
    if (!(o instanceof MyDateClass))
        return false;
    MyDateClass that = (MyDateClass) o;
    // Check variable ivar1 of this object is equal to variable ivar2 of the other object & variable ivar2 of this object equal to variable ivar2 of the other object
    return this.ivar1 == that.ivar2 && this.ivar2 == that.ivar2;
}

@Override
public int hashCode() {
    // Initialize result variable with an initial value based on prime number
    int result = 17;
    // Multiply the result by 31 and add the value of ivar1
    result = 31 * result + ivar1;
    // Multiply the result by 31 and add the value of ivar2
    result = 31 * result + ivar2;
    // Return the result
    return result;
}",4,4,3,4
,50209707,"        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(urlString);


        try {
            CustomMultiPartEntity entity=new CustomMultiPartEntity(new CustomMultiPartEntity.ProgressListener() {

                @Override
                public void transferred(long num) {
                    publishProgress((int) ((num / (float) totalSize) * 100));
                }
            });

            entity.addPart(""FirstName"", new StringBody(Person.getFirstName()));
            entity.addPart(""LastName"", new StringBody(Person.getLastName()));
            entity.addPart(""Email"", new StringBody(Person.getEmail()));
            entity.addPart(""Password"", new StringBody(Person.getPassword()));
            entity.addPart(""Mobilenumber"", new StringBody(Person.getMobilenumber()));
            entity.addPart(""uploadedfile"", new FileBody(sourceFile));
            totalSize = entity.getContentLength();
            httppost.setEntity(entity);
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity r_entity = response.getEntity();
            responseString = EntityUtils.toString(r_entity);

        } catch (ClientProtocolException e) {
            responseString = e.toString();
        } catch (IOException e) {
            responseString = e.toString();
        }
","        HttpClient httpclient = new DefaultHttpClient(); // create the HTTP client
        HttpPost httppost = new HttpPost(urlString); // create the HTTP POST request

        try {
            CustomMultiPartEntity entity=new CustomMultiPartEntity(new CustomMultiPartEntity.ProgressListener() {

                @Override
                public void transferred(long num) {
                    publishProgress((int) ((num / (float) totalSize) * 100)); // calculate and update the upload progress
                }
            });

            entity.addPart(""FirstName"", new StringBody(Person.getFirstName())); // add text parameters to the POST request body
            entity.addPart(""LastName"", new StringBody(Person.getLastName()));
            entity.addPart(""Email"", new StringBody(Person.getEmail()));
            entity.addPart(""Password"", new StringBody(Person.getPassword()));
            entity.addPart(""Mobilenumber"", new StringBody(Person.getMobilenumber()));
            entity.addPart(""uploadedfile"", new FileBody(sourceFile)); // add the file parameter to the POST request body
            totalSize = entity.getContentLength(); // calculate the total size of the POST request body
            httppost.setEntity(entity); // set the POST request entity
            HttpResponse response = httpclient.execute(httppost); // execute the POST request
            HttpEntity r_entity = response.getEntity(); // get the response entity
            responseString = EntityUtils.toString(r_entity); // convert the response entity to a string

        } catch (ClientProtocolException e) {
            responseString = e.toString(); // if a protocol error occurs, save the error message
        } catch (IOException e) {
            responseString = e.toString(); // if an I/O error occurs, save the error message
        }",4,5,3,5
,13827293,"package org.atmosphere.di;

import java.util.NoSuchElementException;
import java.util.ServiceLoader;

import javax.enterprise.context.spi.CreationalContext;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.InjectionTarget;
import javax.naming.InitialContext;
import javax.naming.NamingException;

public class InjectorProvider {

    private InjectorProvider() {}

    public static Injector getInjector() {
        return LazyProvider.INJECTOR;
    }

    private static final class LazyProvider {
        private static final Injector   INJECTOR;

        static {
            Injector injector = new Injector() {
                @Override public void inject(final Object o) {
                    try {
                        final BeanManager bm = (BeanManager) new InitialContext().lookup(""java:comp/BeanManager"");
                        final CreationalContext cc = bm.createCreationalContext(null);
                        final InjectionTarget it = bm.createInjectionTarget(bm.createAnnotatedType(o.getClass()));
                        it.inject(o, cc);
                        cc.release();
                    } catch (final NamingException e) {
                        e.printStackTrace();
                    }
                }
            };
            try {
                injector = ServiceLoader.load(Injector.class).iterator().next();
            } catch (final NoSuchElementException e) {}
            INJECTOR = injector;
        }
    }
}
","package org.atmosphere.di;

import java.util.NoSuchElementException;
import java.util.ServiceLoader;

import javax.enterprise.context.spi.CreationalContext;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.InjectionTarget;
import javax.naming.InitialContext;
import javax.naming.NamingException;

public class InjectorProvider {

    // Private constructor to prevent instantiation
    private InjectorProvider() {}

    // Public method to get the injector instance
    public static Injector getInjector() {
        return LazyProvider.INJECTOR;
    }

    // Nested class to hold the Injector instance lazily
    private static final class LazyProvider {
        // Declaration of the static Injector instance
        private static final Injector INJECTOR;

        // Static block to initialize the INJECTOR instance
        static {
            // Default injector implementation using CDI (Contexts and Dependency Injection)
            Injector injector = new Injector() {
                @Override public void inject(final Object o) {
                    try {
                        // Lookup the BeanManager from JNDI
                        final BeanManager bm = (BeanManager) new InitialContext().lookup(""java:comp/BeanManager"");
                        // Create a CreationalContext for the injection
                        final CreationalContext cc = bm.createCreationalContext(null);
                        // Create an InjectionTarget for the given object's class
                        final InjectionTarget it = bm.createInjectionTarget(bm.createAnnotatedType(o.getClass()));
                        // Perform the injection on the given object
                        it.inject(o, cc);
                        // Release the CreationalContext
                        cc.release();
                    } catch (final NamingException e) {
                        // Print stack trace if JNDI lookup fails
                        e.printStackTrace();
                    }
                }
            };
            // Attempt to load a custom Injector implementation if available
            try {
                // Use ServiceLoader to find an implementation of Injector and use it if available
                injector = ServiceLoader.load(Injector.class).iterator().next();
            } catch (final NoSuchElementException e) {
                // Ignore if no custom Injector implementation is found
            }
            // Assign the finalized injector implementation to the INJECTOR constant
            INJECTOR = injector;
        }
    }
}",4,3,4,4
,57151707,"ExecutorService executor = Executors.newFixedThreadPool(3);

for (int i = 1; i <= 1000; i++) {
      final int counter = i;
      executor.execute(new Runnable() {
          @Override
          public void run() {
              outFile.write(wld.getWord(counter) + ""successful"");
              outFile.write(""\n"");
          }               
      });
}

executor.shutdown(); 
executor.awaitTermination(60, TimeUnit.SECONDS); 

outFile.close(); 
","ExecutorService executor = Executors.newFixedThreadPool(3); // Creates a thread pool with a fixed number of threads (3 in this case) for executing tasks

for (int i = 1; i <= 1000; i++) {
      final int counter = i; // Captures the current value of i for use within the Runnable
      executor.execute(new Runnable() { // Submits a task to the thread pool
          @Override
          public void run() {
              outFile.write(wld.getWord(counter) + ""successful""); // Writes the result to a file
              outFile.write(""\n""); // Writes a new line to the file
          }               
      });
}

executor.shutdown(); // Initiates an orderly shutdown of the thread pool
executor.awaitTermination(60, TimeUnit.SECONDS); // Waits for the thread pool to terminate for a specified duration

outFile.close(); // Closes the file",4,3,4,4
,24125637,"private class MyAsyncImagesDownload extends AsyncTask<URL, Integer, Long> {
    protected Long doInBackground(URL... urls) {
        int count = urls.length;
        long totalSize = 0;


        for (int i = 0; i < count; i++) {
            totalSize += Downloader.downloadFile(urls[i]);
            publishProgress((int) ((i / (float) count) * 100));
            if (isCancelled()) break;
        }
        return totalSize;
    }


    protected void onPostExecute(Long result) {
        showDialog(""Downloaded "" + result + "" bytes"");
    }
}
","private class MyAsyncImagesDownload extends AsyncTask<URL, Integer, Long> {
    protected Long doInBackground(URL... urls) {
        int count = urls.length;
        long totalSize = 0;


        for (int i = 0; i < count; i++) {
            totalSize += Downloader.downloadFile(urls[i]); // Downloads the file from the URL and adds its size to the total size
            publishProgress((int) ((i / (float) count) * 100)); // Publishes the progress of the download
            if (isCancelled()) break; // Checks if the task has been cancelled and breaks the loop if it has
        }
        return totalSize;
    }


    protected void onPostExecute(Long result) {
        showDialog(""Downloaded "" + result + "" bytes""); // Shows a dialog with the total size of the downloaded files
    }
}",5,4,4,5
,59497536,"import org.apache.poi.ss.usermodel.*;

import java.util.List; 
import java.util.ArrayList; 

import java.io.FileInputStream;

public class ExcelReadRowsByColumnValue {

 public static void main(String[] args) throws Exception {

  String filePath = ""./ExcelWorkbook.xlsx"";

  String toSearch = ""coresystem"";
  int searchColumn = 7; 
  List<Row> results = new ArrayList<Row>();

  DataFormatter dataFormatter = new DataFormatter();
  Workbook workbook = WorkbookFactory.create(new FileInputStream(filePath));
  FormulaEvaluator formulaEvaluator = workbook.getCreationHelper().createFormulaEvaluator(); 
  Sheet sheet = workbook.getSheetAt(0);

  for (Row row : sheet) { 
   Cell cellInSearchColumn = row.getCell(searchColumn); 
   if (cellInSearchColumn != null) { 
    String cellValue = dataFormatter.formatCellValue(cellInSearchColumn, formulaEvaluator); 
    if (toSearch.equalsIgnoreCase(cellValue)) { 
     results.add(row); 
    }
   }
  }


  System.out.println(""Found results:"");
  for (Row row : results) {
   int rowNumber = row.getRowNum()+1;
   System.out.print(""Row "" + rowNumber + "":\t"");
   for (Cell cell : row) {
    String cellValue = dataFormatter.formatCellValue(cell, formulaEvaluator);
    System.out.print(cellValue + ""\t"");
   }
   System.out.println();
  }

  workbook.close();
 }
}
","```java
import org.apache.poi.ss.usermodel.*; // Import needed Apache POI classes

import java.util.List;
import java.util.ArrayList; // Import needed Java collection classes

import java.io.FileInputStream; // Import Java I/O classes

public class ExcelReadRowsByColumnValue { // Class to read specific rows based on a column value

    public static void main(String[] args) throws Exception { // Main method

        String filePath = ""./ExcelWorkbook.xlsx""; // Path to the Excel file

        String toSearch = ""coresystem""; // String to search for in the specified column
        int searchColumn = 7; // Column index to search in (0-based)
        List<Row> results = new ArrayList<Row>(); // List to store found rows

        DataFormatter dataFormatter = new DataFormatter(); // Create a data formatter to format cell values
        Workbook workbook = WorkbookFactory.create(new FileInputStream(filePath)); // Create a workbook from the Excel file
        FormulaEvaluator formulaEvaluator = workbook.getCreationHelper().createFormulaEvaluator(); // Create a formula evaluator
        Sheet sheet = workbook.getSheetAt(0); // Get the first sheet from the workbook

        // Loop through each row in the sheet
        for (Row row : sheet) {
            Cell cellInSearchColumn = row.getCell(searchColumn); // Get the cell in the specified search column
            if (cellInSearchColumn != null) { // Check if the cell is not null (empty)
                String cellValue = dataFormatter.formatCellValue(cellInSearchColumn, formulaEvaluator); // Format the cell value using the data formatter
                // Compare the cell value with the value to search for
                if (toSearch.equalsIgnoreCase(cellValue)) {
                    results.add(row); // Add the row to the list of found rows
                }
            }
        }

        // Print the found results
        System.out.println(""Found results:"");
        for (Row row : results) {
            int rowNumber = row.getRowNum() + 1; // Get the row number (1-based)
            System.out.print(""Row "" + rowNumber + "":\t""); // Print the row number
            // Loop through each cell in the row
            for (Cell cell : row) {
                String cellValue = dataFormatter.formatCellValue(cell, formulaEvaluator); // Format the cell value using the data formatter
                System.out.print(cellValue + ""\t""); // Print the cell value and a tab
            }
            System.out.println(); // Print a newline
        }

        workbook.close(); // Close the workbook
    }
}
```",5,5,4,5
,65764230,"class YourActivity {

    private Handler handler = new Handler();
    private Runnable runnable;

    public View onCreateView() {

        runnable = new Runnable() {
            @Override
            public void run() {
                int random = new Random().nextInt(20);
                topStatus_tv.setText(topStatus[random]);
                handler.postDelayed(runnable, 12000);
            }
        };
        handler.postDelayed(runnable, 12000);

    }
}
","class YourActivity {

    private Handler handler = new Handler(); // Creates a Handler to schedule and manage tasks
    private Runnable runnable; // Runnable object to execute the task

    public View onCreateView() {

        runnable = new Runnable() {
            @Override
            public void run() {
                int random = new Random().nextInt(20); // Generates a random number between 0 and 19
                // Sets a random status message from the topStatus array in the topStatus_tv TextView
                topStatus_tv.setText(topStatus[random]);
                handler.postDelayed(runnable, 12000); // Schedules the runnable to run again after 12 seconds
            }
        };
        handler.postDelayed(runnable, 12000); // Schedules the runnable to run for the first time after 12 seconds

    }
}",4,5,3,4
,43516291,"private byte[] copyFormElements(byte[] sourceTemplate) throws IOException {
    PdfReader completeReader = new PdfReader(new ByteArrayInputStream(sourceTemplate));
    PdfDocument completeDoc = new PdfDocument(completeReader);

    ByteArrayOutputStream out = new ByteArrayOutputStream();
    PdfWriter offsetWriter = new PdfWriter(out);
    PdfDocument offsetDoc = new PdfDocument(offsetWriter);
    offsetDoc.initializeOutlines();
    PdfPage blank = offsetDoc.addNewPage();
    PdfAcroForm originalForm = PdfAcroForm.getAcroForm(completeDoc, false);

    PdfAcroForm offsetForm = PdfAcroForm.getAcroForm(offsetDoc, true);

    for (String name : originalForm.getFormFields().keySet()) {
        PdfFormField field = originalForm.getField(name);
        PdfDictionary copied = field.getPdfObject().copyTo(offsetDoc, false);
        PdfFormField copiedField = PdfFormField.makeFormField(copied, offsetDoc);
        offsetForm.addField(copiedField, blank);
    }

    offsetDoc.close();
    completeDoc.close();
    return out.toByteArray();
}
","private byte[] copyFormElements(byte[] sourceTemplate) throws IOException {
    // Create a reader for the source PDF template
    PdfReader completeReader = new PdfReader(new ByteArrayInputStream(sourceTemplate));

    // Create a PDF document from the reader
    PdfDocument completeDoc = new PdfDocument(completeReader);

    // Create an output stream for the new PDF document
    ByteArrayOutputStream out = new ByteArrayOutputStream();

    // Create a writer for the new PDF document
    PdfWriter offsetWriter = new PdfWriter(out);

    // Create a new PDF document for the writer
    PdfDocument offsetDoc = new PdfDocument(offsetWriter);

    // Initialize the outlines of the new PDF document
    offsetDoc.initializeOutlines();

    // Create a blank page for the new PDF document
    PdfPage blank = offsetDoc.addNewPage();

    // Get the original form from the complete PDF document
    PdfAcroForm originalForm = PdfAcroForm.getAcroForm(completeDoc, false);

    // Get the form from the offset PDF document
    PdfAcroForm offsetForm = PdfAcroForm.getAcroForm(offsetDoc, true);

    // Iterate over the fields in the original form
    for (String name : originalForm.getFormFields().keySet()) {
        // Get the field from the original form
        PdfFormField field = originalForm.getField(name);

        // Copy the field to the offset document
        PdfDictionary copied = field.getPdfObject().copyTo(offsetDoc, false);

        // Create a field from the copied dictionary
        PdfFormField copiedField = PdfFormField.makeFormField(copied, offsetDoc);

        // Add the field to the offset form
        offsetForm.addField(copiedField, blank);
    }

    // Close the offset PDF document
    offsetDoc.close();

    // Close the complete PDF document
    completeDoc.close();

    // Return the bytes of the new PDF document
    return out.toByteArray();
}",5,5,4,5
,45411226,"try {
    JSONArray jsonArray = new JSONArray(d);
    if(jsonArray != null) {
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.optJSONObject(i);

            if(jsonObject == null) {
                continue;
            }

            String name = jsonObject.optString(""name"");
            String isMe = jsonObject.optString(""isMe"");
            String time = jsonObject.optString(""time"");

        }
    }
} catch (JSONException e) {
    e.printStackTrace();
}
","try {
    JSONArray jsonArray = new JSONArray(d); // Initialize a JSONArray with the parsed JSON string
    if(jsonArray != null) { // Checking if the JSONArray is not null
        for (int i = 0; i < jsonArray.length(); i++) { // Iterate through the JSONArray
            JSONObject jsonObject = jsonArray.optJSONObject(i); // Get the JSONObject at index i

            if(jsonObject == null) { // Checking if the JSONObject is not null
                continue; // Skip to the next iteration if the JSONObject is null
            }

            String name = jsonObject.optString(""name""); // Get the ""name"" value from the JSONObject
            String isMe = jsonObject.optString(""isMe""); // Get the ""isMe"" value from the JSONObject
            String time = jsonObject.optString(""time""); // Get the ""time"" value from the JSONObject

        }
    }
} catch (JSONException e) { // Catching JSON parsing exceptions
    e.printStackTrace();
}",5,4,4,4
,18846485,"public class Temp {

    public static void main (String args[]) {
        String input = convertSting(""2BXX09XX2BYYYY"");
        input = replaceSize(input, ""0A"");

        System.out.println(input);
    }

    private static String replaceSize(String input, String newSizeVal) {
        int sizePosition = 4;
        return input.substring(0, sizePosition) + newSizeVal + input.substring(sizePosition + newSizeVal.length(), input.length());
    }

    public static String convertSting (String input) {
        String findString = ""2B"";

        int firstIndex = input.indexOf(findString) + findString.length();
        return input.substring(0, firstIndex) + input.substring(firstIndex, input.length()).replace(findString, ""2B2B"");
    }
}
","```java
public class Temp {

    public static void main(String[] args) {
        // Convert the input string to a new string
        String input = convertSting(""2BXX09XX2BYYYY"");
        // Replace the size value in the new string
        input = replaceSize(input, ""0A"");
        // Print the updated string
        System.out.println(input);
    }

    // Replace the size value in the input string
    private static String replaceSize(String input, String newSizeVal) {
        // Get the position of the size value
        int sizePosition = 4;
        // Create the updated string by replacing the old size value with the new size value
        return input.substring(0, sizePosition) + newSizeVal + input.substring(sizePosition + newSizeVal.length(), input.length());
    }

    // Convert the input string to a new string
    public static String convertSting(String input) {
        // Find the first occurrence of the string ""2B""
        String findString = ""2B"";
        int firstIndex = input.indexOf(findString) + findString.length();
        // Create the updated string by replacing all occurrences of ""2B"" with ""2B2B""
        return input.substring(0, firstIndex) + input.substring(firstIndex, input.length()).replace(findString, ""2B2B"");
    }
}
```",4,5,4,5
,57269001,"@RestController
@FeignClient(name = ""zuul-server"")
public interface ProxyImages {

    @Configuration
    class MultipartSupportConfig {

        @Autowired
        private ObjectFactory<HttpMessageConverters> messageConverters;

        @Bean
        @Primary
        @Scope(""prototype"")
        public Encoder feignFormEncoder() {
            return new SpringFormEncoder(new SpringEncoder(messageConverters));
        }
    }

    @RequestMapping(value = {""oauth2-server/auth/user/avatar""}, consumes = {""multipart/form-data""})
    ResponseEntity<String> saveUserAvatar(@RequestPart(name = ""file"") MultipartFile file);
}
","@RestController // Indicates that this class is a REST controller
@FeignClient(name = ""zuul-server"") // Defines the feign client with the name ""zuul-server""
public interface ProxyImages {

    // Configuration class for multipart support
    @Configuration
    class MultipartSupportConfig {

        @Autowired
        private ObjectFactory<HttpMessageConverters> messageConverters; // Autowires the object factory of HTTP message converters

        @Bean // Declares a bean
        @Primary // Sets the bean as the primary bean
        @Scope(""prototype"") // Sets the bean scope to prototype
        public Encoder feignFormEncoder() {
            // Creates a feign form encoder using the Spring form encoder and Spring encoder
            return new SpringFormEncoder(new SpringEncoder(messageConverters));
        }
    }

    @RequestMapping(value = {""oauth2-server/auth/user/avatar""}, consumes = {""multipart/form-data""}) // Defines the request mapping for saving user avatar with multipart/form-data
    ResponseEntity<String> saveUserAvatar(@RequestPart(name = ""file"") MultipartFile file); // Saves the user avatar using a multipart file parameter
}",5,5,4,5
,28809396,"public static Bitmap getDisplayPhoto(Context context, String contactNumber) {

        contactNumber = Uri.encode(contactNumber);
        int phoneContactID = -1;
        Cursor contactLookupCursor = context.getContentResolver().query(Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, contactNumber),
                new String[] { PhoneLookup.DISPLAY_NAME, PhoneLookup._ID }, null, null, null);
        while (contactLookupCursor.moveToNext()) {
            phoneContactID = contactLookupCursor.getInt(contactLookupCursor.getColumnIndexOrThrow(PhoneLookup._ID));
        }
        contactLookupCursor.close();

        Bitmap photo = null;
        if (phoneContactID != -1) {
            Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, phoneContactID);
            Uri displayPhotoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.DISPLAY_PHOTO);
            try {
                AssetFileDescriptor fd = context.getContentResolver().openAssetFileDescriptor(displayPhotoUri, ""r"");

                photo = BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor());
            } catch (IOException e) {
            }
        }

        return photo;
    }
","```java
public static Bitmap getDisplayPhoto(Context context, String contactNumber) {

        // Uri encode the contact number
        contactNumber = Uri.encode(contactNumber);

        int phoneContactID = -1;

        // Query the Phone Lookup Content Provider to get the contact ID
        Cursor contactLookupCursor = context.getContentResolver().query(Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, contactNumber),
                new String[] { PhoneLookup.DISPLAY_NAME, PhoneLookup._ID }, null, null, null);
        while (contactLookupCursor.moveToNext()) {
            phoneContactID = contactLookupCursor.getInt(contactLookupCursor.getColumnIndexOrThrow(PhoneLookup._ID));
        }
        contactLookupCursor.close();

        Bitmap photo = null;
        // If the contact ID is not -1, then the contact exists
        if (phoneContactID != -1) {
            Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, phoneContactID);
            Uri displayPhotoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.DISPLAY_PHOTO);
            // Try to get the display photo
            try {
                AssetFileDescriptor fd = context.getContentResolver().openAssetFileDescriptor(displayPhotoUri, ""r"");
                photo = BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor());
            } catch (IOException e) {
            }
        }

        return photo;
    }
```",5,4,3,5
,45605051,"PdfDocument pdfDocument = new PdfDocument(new PdfWriter(getOutputFile()));
Document layoutDocument = new Document(pdfDocument);


Table table = new Table(UnitValue.createPercentArray(new float[]{0.5f, 0.5f}));


Cell headerCell = new Cell(1,2);      
headerCell.add(new Paragraph(""Tax""));
table.addCell(headerCell);


table.addCell(new Cell().add(new Paragraph(""Name"")));
table.addCell(new Cell().add(new Paragraph(""%"")));


table.addCell(new Cell().add(new Paragraph(""The java cookbook"")));
table.addCell(new Cell().add(new Paragraph(""6"")));

layoutDocument.add(table);
layoutDocument.close();
","PdfDocument pdfDocument = new PdfDocument(new PdfWriter(getOutputFile())); // Creates a new PDF document
Document layoutDocument = new Document(pdfDocument); // Creates a new document layout for the PDF document


Table table = new Table(UnitValue.createPercentArray(new float[]{0.5f, 0.5f})); // Creates a table with two columns of equal width


Cell headerCell = new Cell(1,2);      // Creates a cell that spans two columns
headerCell.add(new Paragraph(""Tax"")); // Adds the header text to the cell
table.addCell(headerCell); // Adds the header cell to the table


table.addCell(new Cell().add(new Paragraph(""Name""))); // Adds a cell with the ""Name"" header
table.addCell(new Cell().add(new Paragraph(""%""))); // Adds a cell with the ""%"" header


table.addCell(new Cell().add(new Paragraph(""The java cookbook""))); // Adds a cell with the ""The java cookbook"" text
table.addCell(new Cell().add(new Paragraph(""6""))); // Adds a cell with the ""6"" text

layoutDocument.add(table); // Adds the table to the document layout
layoutDocument.close(); // Closes the document layout and writes the PDF file",4,4,3,4
,29134019,"Class Address {
   City city; 
}

Class Business {}

Class City {
   List<Business> business; 
}

Class Restaurant extends Business{ 
    Address address; 
}

Class Theater extends Business { 
    Address address;  
}
","Class Address {
   City city; // contains the city information
}

Class Business {} // base class for businesses

Class City {
   List<Business> business; // contains businesses in this city
}

Class Restaurant extends Business { // subclass for restaurants
    Address address; // contains the address of this restaurant
}

Class Theater extends Business { // subclass for theaters
    Address address; // contains the address of this theater
}",5,5,3,5
,29450736,"public class Perm {
    private static int factorial(int n) {
        int fact = 1;
        for (int i = 1; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }

    private static void swap(int[] elements, int i, int j) {
        int temp = elements[i];
        elements[i] = elements[j];
        elements[j] = temp;
    }

        private static void reverse(int[] array, int startIndex, int endIndex) {
        int size = endIndex + 1 - startIndex;
        int limit = startIndex + size / 2;
        for (int i = startIndex; i < limit; i++) {

            swap(array, i, 2 * startIndex + size - 1 - i);
        }
    }

    private static void printSequence(int[] sequence) {
        for (int i = 0; i < sequence.length; i++) {
            System.out.printf(""%d, "", sequence[i]);
        }
        System.out.println();
    }

        private static void permutations(int[] sequence) {
        final int N = sequence.length;


        int numPermutations = factorial(N) - 1;


        for (int n = 0; n < numPermutations; n++) {



            for (int i = N - 1; i >= 1; i--) {

                if (sequence[i - 1] < sequence[i]) {

                    int pivotIndex = i - 1;




                    for (int j = N - 1; j > pivotIndex; j--) {
                        if (sequence[j] > sequence[pivotIndex]) {
                            swap(sequence, j, pivotIndex);
                            break;
                        }
                    }



                    reverse(sequence, pivotIndex + 1, N - 1);
                    break;
                }
            }

            printSequence(sequence);
        }
    }

    public static void main(String... args) {
        final int N = 3;
        int[] sequence = new int[N];
        for (int i = 0; i < N; i++) {
            sequence[i] = i + 1;
        }

        printSequence(sequence);
        permutations(sequence);
    }
}
","```java
public class Perm {
    // Calculate the factorial of a given number
    private static int factorial(int n) {
        int fact = 1;
        for (int i = 1; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }

    // Swap two elements in an array
    private static void swap(int[] elements, int i, int j) {
        int temp = elements[i];
        elements[i] = elements[j];
        elements[j] = temp;
    }

    // Reverse a part of an array
    private static void reverse(int[] array, int startIndex, int endIndex) {
        int size = endIndex + 1 - startIndex;
        int limit = startIndex + size / 2;
        for (int i = startIndex; i < limit; i++) {
            // Swap the elements symmetrically around the middle
            swap(array, i, 2 * startIndex + size - 1 - i);
        }
    }

    // Print a sequence of numbers
    private static void printSequence(int[] sequence) {
        for (int i = 0; i < sequence.length; i++) {
            System.out.printf(""%d, "", sequence[i]);
        }
        System.out.println();
    }

    // Generate permutations of a given sequence
    private static void permutations(int[] sequence) {
        final int N = sequence.length;

        // Calculate the total number of permutations
        int numPermutations = factorial(N) - 1;

        // Iterate through each permutation
        for (int n = 0; n < numPermutations; n++) {
            // Find the largest index where the sequence is in decreasing order
            for (int i = N - 1; i >= 1; i--) {
                if (sequence[i - 1] < sequence[i]) {
                    // Find the smallest element greater than the pivot element on the right side
                    int pivotIndex = i - 1;
                    for (int j = N - 1; j > pivotIndex; j--) {
                        if (sequence[j] > sequence[pivotIndex]) {
                            swap(sequence, j, pivotIndex);
                            break;
                        }
                    }
                    // Reverse the sequence after the pivot element
                    reverse(sequence, pivotIndex + 1, N - 1);
                    break;
                }
            }
            // Print the current permutation
            printSequence(sequence);
        }
    }

    public static void main(String... args) {
        final int N = 3;
        int[] sequence = new int[N];
        for (int i = 0; i < N; i++) {
            sequence[i] = i + 1;
        }

        printSequence(sequence);
        permutations(sequence);
    }
}
```",5,5,4,5
,22456303,"private static byte[] convert(final InputStream is) throws IOException {
    final byte[] END_SIG = new byte[]{""\r"".getBytes()[0], ""\n"".getBytes()[0]};
    final List<Byte> streamBytes = new ArrayList<Byte>();
    int readByte;
    byte[] bytes;


    while ((readByte = is.read()) != -1) {
        streamBytes.add((byte) readByte);
        if (streamBytes.size() > 4) {
            int sbsize = streamBytes.size();

            int rp = sbsize - 4;
            int np = sbsize - 2;
            int rn = sbsize - 3;
            int nn = sbsize - 1;

            if (END_SIG[0] == streamBytes.get(rp) &amp;&amp; END_SIG[0] == streamBytes.get(np) &amp;&amp; END_SIG[1] == streamBytes.get(rn) &amp;&amp; END_SIG[1] == streamBytes.get(nn)) {
                break;
            }
        }
    }


    bytes = new byte[streamBytes.size()];
    for (int i = 0, iMAX = bytes.length; i < iMAX; ++i) {
        bytes[i] = streamBytes.get(i);
    }


    streamBytes.clear();


    final String HEADER = new String(bytes);
    int startIndex = HEADER.indexOf(""Content-Length:"") + ""Content-Length:"".length() + 1;
    int length = 0;
    int I = startIndex;
    while (Character.isDigit(HEADER.charAt(I++))) {
        ++length;
    }
    final String CL = HEADER.substring(startIndex, startIndex + length);


    int ContentLength = Integer.parseInt(CL);
    while (streamBytes.size() < ContentLength) {
        byte[] buffer = new byte[256];

        int rc = is.read(buffer);
        for (int irc = 0; irc < rc; ++irc) {
            streamBytes.add(buffer[irc]);
        }
    }


    bytes = new byte[streamBytes.size()];
    for (int i = 0, iMAX = bytes.length; i < iMAX; ++i) {
        bytes[i] = streamBytes.get(i);
    }

    return bytes;
}
","```java
private static byte[] convert(final InputStream is) throws IOException {
    final byte[] END_SIG = new byte[]{""\r"".getBytes()[0], ""\n"".getBytes()[0]}; // End of data signal
    final List<Byte> streamBytes = new ArrayList<Byte>(); // List to store data
    int readByte;
    byte[] bytes;

    while ((readByte = is.read()) != -1) { // Read data from the stream
        streamBytes.add((byte) readByte); // Add data to the list
        if (streamBytes.size() > 4) { // Check if the data size is greater than 4 bytes
            int sbsize = streamBytes.size(); // Get the size of the list
            int rp = sbsize - 4; // Calculate index to check for end of signal
            int np = sbsize - 2;
            int rn = sbsize - 3;
            int nn = sbsize - 1;

            if (END_SIG[0] == streamBytes.get(rp) &amp;&amp; END_SIG[0] == streamBytes.get(np) &amp;&amp; END_SIG[1] == streamBytes.get(rn) &amp;&amp; END_SIG[1] == streamBytes.get(nn)) {
                break; // End of signal found, exit loop
            }
        }
    }

    bytes = new byte[streamBytes.size()]; // Create byte array with the size of the list
    for (int i = 0, iMAX = bytes.length; i < iMAX; ++i) { // Copy data from list to byte array
        bytes[i] = streamBytes.get(i);
    }

    streamBytes.clear(); // Clear the streamBytes list

    final String HEADER = new String(bytes); // Convert bytes to string for header
    int startIndex = HEADER.indexOf(""Content-Length:"") + ""Content-Length:"".length() + 1; // Find the starting index of Content-Length
    int length = 0;
    int I = startIndex;
    while (Character.isDigit(HEADER.charAt(I++))) { // Determine the length of the Content-Length value
        ++length;
    }
    final String CL = HEADER.substring(startIndex, startIndex + length); // Extract the Content-Length value

    int ContentLength = Integer.parseInt(CL); // Convert the Content-Length to an integer
    while (streamBytes.size() < ContentLength) { // Read the remaining data
        byte[] buffer = new byte[256]; // Create buffer array
        int rc = is.read(buffer); // Read data into buffer
        for (int irc = 0; irc < rc; ++irc) { // Copy data from buffer to streamBytes list
            streamBytes.add(buffer[irc]);
        }
    }

    bytes = new byte[streamBytes.size()]; // Create byte array with the size of the list
    for (int i = 0, iMAX = bytes.length; i < iMAX; ++i) { // Copy data from list to byte array
        bytes[i] = streamBytes.get(i);
    }

    return bytes; // Return the data as a byte array
}
```",5,5,4,4
,55764032,"public void deposit() throws SQLException {

    System.out.println(""How much money do u want to deposit?"");
    int val = sc.nextInt();
    int accountNumber = 654321;

    String query = ""SELECT Balance FROM accounts.accs where AccountNumber = ?"";
    try( Connection con = DriverManager.getConnection(url,username,password);
         PreparedStatement stmt = con.prepareStatement(query)) {

        stmt.setInt(1, accountNumber);
        ResultSet rs = stmt.executeQuery();

        String query2 = ""UPDATE accs "" +
                    ""SET Balance = ? "" +
                    ""WHERE AccountNumber = ?"";
        try (PreparedStatement stmt2 = con.prepareStatement(query2)) {
            while (rs.next()){
                int balance = rs.getInt(""Balance"");
                System.out.println(""test"");
                int updatedBalance = balance+val;
                System.out.println(""the updatetbalance is"" + updatedBalance +"""");

                stmt2.setInt(1, updatedBalance);
                stmt2.setInt(2, accountNumber);
                stmt2.executeUpdate();
            }
        }
    }
}
","```java
public void deposit() throws SQLException {

    System.out.println(""How much money do u want to deposit?""); // Prompts the user to input the amount they want to deposit
    int val = sc.nextInt(); // Reads the amount entered by the user
    int accountNumber = 654321; // Initialize the account number (can be replaced with user input)

    String query = ""SELECT Balance FROM accounts.accs where AccountNumber = ?""; // SQL query to retrieve the current balance
    try( Connection con = DriverManager.getConnection(url,username,password); 
         PreparedStatement stmt = con.prepareStatement(query)) { // Establishes a connection to the database and prepares the query

        stmt.setInt(1, accountNumber); // Sets the account number parameter in the query
        ResultSet rs = stmt.executeQuery(); // Executes the query and gets the results

        String query2 = ""UPDATE accs "" +
                    ""SET Balance = ? "" +
                    ""WHERE AccountNumber = ?""; // SQL query to update the balance
        try (PreparedStatement stmt2 = con.prepareStatement(query2)) { // Prepares the update query
            while (rs.next()){ 
                int balance = rs.getInt(""Balance""); // Gets the current balance from the result set
                System.out.println(""test""); // For debugging purposes
                int updatedBalance = balance+val; // Calculates the updated balance
                System.out.println(""the updatetbalance is"" + updatedBalance +""""); // For debugging purposes

                stmt2.setInt(1, updatedBalance); // Sets the updated balance parameter in the query
                stmt2.setInt(2, accountNumber); // Sets the account number parameter in the query
                stmt2.executeUpdate(); // Executes the update query
            }
        }
    }
}
```",4,3,3,4
,20717557," int check [][]= new int [100][100];

public void actionPerformed(ActionEvent e)
{           
    if(e.getActionCommand().contains(""button""))
    {
        String str = e.getActionCommand().replaceAll(""button"", """");
        System.out.println(str);
        String[] v = str.split(""_"");
        int i = Integer.parseInt(v[0]);
        int j = Integer.parseInt(v[1]);            
        intArray[i][j]++;
        if(check[i][j]!=1){
            buttons[i][j].setBackground(Color.BLUE);
            check[i][j]=1;
        }
        else{
            buttons[i][j].setBackground(null);
            check[i][j]=0;
        }

    System.out.println(e.getActionCommand() +""  "" +i +""  "" +j);

    score2();
}
","```java
// Array to keep track of the state of each button
int check[][] = new int[100][100];

public void actionPerformed(ActionEvent e) {
    if (e.getActionCommand().contains(""button"")) {
        // Extract button coordinates from the action command
        String str = e.getActionCommand().replaceAll(""button"", """");
        System.out.println(str);
        String[] v = str.split(""_"");
        int i = Integer.parseInt(v[0]);
        int j = Integer.parseInt(v[1]);

        // Increment the score for the clicked button
        intArray[i][j]++;

        // Toggle the background color and check array state
        if (check[i][j] != 1) {
            buttons[i][j].setBackground(Color.BLUE);
            check[i][j] = 1;
        } else {
            buttons[i][j].setBackground(null);
            check[i][j] = 0;
        }

        // Debugging output
        System.out.println(e.getActionCommand() + ""  "" + i + ""  "" + j);

        // Update the score display
        score2();
    }
}
```",5,4,4,4
,38370063,"@SpringBootApplication
@EnableAsync
public class MySpringBootApp {

    @Bean
    public TaskExecutor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(25);
        return executor;
    }

    public static void main(String[] args) {

    }
}
","```java
@SpringBootApplication // Main annotation to mark the class as a Spring Boot application
@EnableAsync // Annotation to enable asynchronous execution
public class MySpringBootApp {
    // Bean to define the task executor for asynchronous execution
    @Bean
    public TaskExecutor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); // Creating a ThreadPoolTaskExecutor object
        executor.setCorePoolSize(5); // Setting the core pool size to 5
        executor.setMaxPoolSize(10); // Setting the maximum pool size to 10
        executor.setQueueCapacity(25); // Setting the queue capacity to 25
        return executor;
    }

    public static void main(String[] args) {
        // This is the main application entry point, which Spring Boot uses to bootstrap the application
    }
}
```",5,5,4,5
,14247234,"import java.lang.reflect.*;
import java.util.*;

public class ArrayTest
{ 
  public static void main(String[] args)
  {
    evaluate(""Hello"");
    evaluate(new Boolean[]{Boolean.TRUE, Boolean.FALSE});
    evaluate(new int[]{0, 1, 2});
    evaluate(null);
  }

  public static void evaluate(Object object)
  {
    List<String> primitiveArrayTypes = Arrays.asList(new String[] {
        ""boolean[]"", ""byte[]"", ""char[]"", ""double[]"",
        ""float[]"", ""int[]"", ""long[]"", ""short[]""
    });

    if (object == null)
    {
      System.out.println(""Null object."");
      return;
    }

    Class objClass = object.getClass();

    if (objClass.isArray())
    {
      if (primitiveArrayTypes.contains(objClass.getCanonicalName()))
      {
        System.out.println(""Contents of primitive array:"");
        for (int i = 0; i < Array.getLength(object); i++)
        {
          System.out.println(Array.get(object, i));
        }
      }
      else
      {
        System.out.println(""Contents of Object array:"");
        for (Object obj : (Object[]) object)  
        {
          System.out.println(obj);
        }
      }
    }
    else
    {
      System.out.println(""Not an array: "" + object);
    }
    System.out.println(""---"");
  }
}
","```java
import java.lang.reflect.*;
import java.util.*;

public class ArrayTest {
  public static void main(String[] args) {
    evaluate(""Hello"");
    evaluate(new Boolean[] {Boolean.TRUE, Boolean.FALSE}); // Evaluate a boolean array
    evaluate(new int[] {0, 1, 2}); // Evaluate an int array
    evaluate(null);
  }

  public static void evaluate(Object object) {
    List<String> primitiveArrayTypes = Arrays.asList(new String[] {
        ""boolean[]"", ""byte[]"", ""char[]"", ""double[]"",
        ""float[]"", ""int[]"", ""long[]"", ""short[]""
    });

    if (object == null) {
      System.out.println(""Null object.""); // Print message for null object
      return;
    }

    Class objClass = object.getClass();

    if (objClass.isArray()) {
      if (primitiveArrayTypes.contains(objClass.getCanonicalName())) {
        System.out.println(""Contents of primitive array:""); // Print message for primitive array evaluation
        for (int i = 0; i < Array.getLength(object); i++) {
          System.out.println(Array.get(object, i)); // Print each element of the primitive array
        }
      } else {
        System.out.println(""Contents of Object array:""); // Print message for object array evaluation
        for (Object obj : (Object[]) object) {
          System.out.println(obj); // Print each object in the array
        }
      }
    } else {
      System.out.println(""Not an array: "" + object); // Print message for non-array object
    }
    System.out.println(""---"");
  }
}
```",5,4,5,5
,24691931,"private int getMinMax(int[][] table, boolean max){
    if(max) return max(table);
    else return min(table);
}

private int min(int[][] table){
    int tempMin = int[0][0];

    for(int i = 0; i < table.length; i++)
        for(int j = 1; j < table[i].length; j++)
            if(table[i][j] < tempMin) tempMin = table[i][j];

    return tempMin;

}

 private int max(int[][] table){
    int tempMax = int[0][0];

    for(int i = 0; i < table.length; i++)
        for(int j = 1; j < table[i].length; j++)
            if(table[i][j] > tempMax) tempMax = table[i][j];

    return tempMax;

}
","```java
private int getMinMax(int[][] table, boolean max) {
    // Return max or min of the table based on the boolean flag 'max'
    if (max)
        return max(table);
    else
        return min(table);
}

private int min(int[][] table) {
    int tempMin = table[0][0]; // Initialize tempMin with the first element of the table

    for (int i = 0; i < table.length; i++)
        for (int j = 1; j < table[i].length; j++)
            if (table[i][j] < tempMin)
                tempMin = table[i][j]; // Update tempMin if a smaller element is found

    return tempMin;
}

private int max(int[][] table) {
    int tempMax = table[0][0]; // Initialize tempMax with the first element of the table

    for (int i = 0; i < table.length; i++)
        for (int j = 1; j < table[i].length; j++)
            if (table[i][j] > tempMax)
                tempMax = table[i][j]; // Update tempMax if a larger element is found

    return tempMax;
}
```",5,5,4,5
,48334094,"WebElement pagination = d.findElement(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/ul""));
List < WebElement > allPaginations = pagination.findElements(By.tagName(""a""));
WebElement title = d.findElement(By.linkText("">""));
System.out.println(allPaginations.size());
if (allPaginations.size() > 0)
{
    System.out.println(""Pagination exists"");
    for (int i = 0; i < allPaginations.size(); i++)
    {
        pagination = d.findElement(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/ul""));
        allPaginations = pagination.findElements(By.tagName(""a""));
        Thread.sleep(3000);
        allPaginations.get(i).click();
        d.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS);
        List < WebElement > ngo_Names = d.findElements(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/table/tbody/tr/td[2]""));
        System.out.println(ngo_Names.size());

    }
}
else
{
    System.out.println(""Pagination doesn't exists"");
}
","WebElement pagination = d.findElement(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/ul"")); // Store the web element for pagination

List < WebElement > allPaginations = pagination.findElements(By.tagName(""a"")); // Store all pagination elements

WebElement title = d.findElement(By.linkText("">"")); // Store the web element for title (the '>' symbol)

System.out.println(allPaginations.size()); // Print the number of pagination elements

if (allPaginations.size() > 0) // If there are pagination elements
{
    System.out.println(""Pagination exists""); // Print that pagination exists

    for (int i = 0; i < allPaginations.size(); i++) // Iterate through the pagination elements
    {
        pagination = d.findElement(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/ul"")); // Store the web element for pagination again

        allPaginations = pagination.findElements(By.tagName(""a"")); // Store all pagination elements again

        Thread.sleep(3000); // Sleep for 3 seconds (to wait for the page to load)

        allPaginations.get(i).click(); // Click on the pagination element at index 'i'

        d.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS); // Set the page load timeout to 5 seconds
        // Note: This line sets the amount of time WebDriver will wait for a web element to be found.

        List < WebElement > ngo_Names = d.findElements(By.xpath(""/html/body/div[9]/div[1]/div[3]/div/div/div[2]/table/tbody/tr/td[2]"")); // Store all NGO names

        System.out.println(ngo_Names.size()); // Print the number of NGO names
    }
}
else // If there are no pagination elements
{
    System.out.println(""Pagination doesn't exists""); // Print that pagination doesn't exist
}",4,3,4,5
,45629990,"import com.ibm.websphere.security.NotImplementedException;
import com.ibm.wsspi.security.auth.callback.Constants;
import com.ibm.wsspi.security.auth.callback.WSMappingCallbackHandlerFactory;
import javax.resource.spi.security.PasswordCredential;
import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;

Map map = new HashMap();
map.put(Constants.MAPPING_ALIAS, ""REPLACE_WITH_YOUR_AUTH_ALIAS"");
CallbackHandler callbackHandler = null;
try {
    callbackHandler = WSMappingCallbackHandlerFactory.getInstance().getCallbackHandler(map, null);
} catch (NotImplementedException e) {
}

LoginContext loginContext = null;
try {
loginContext = new LoginContext(""DefaultPrincipalMapping"", callbackHandler);
    loginContext.login();
} catch (LoginException e) {
}

Subject subject = loginContext.getSubject();
Set credentials = subject.getPrivateCredentials();

PasswordCredential passwordCredential = (PasswordCredential) credentials.iterator().next();

String user = passwordCredential.getUserName();
String password = new String(passwordCredential.getPassword());

response.setContentType(""text/html"");
PrintWriter out = response.getWriter();
out.println(""<h1>User: "" + user + "" --- Password: "" + password+""</h1>"");
","import com.ibm.websphere.security.NotImplementedException; //Used to handle errors related to Not Implemented Exceptions
import com.ibm.wsspi.security.auth.callback.Constants; //Import for constants used in the code
import com.ibm.wsspi.security.auth.callback.WSMappingCallbackHandlerFactory; //Factory class for creating WSMappingCallbackHandler instances
import javax.resource.spi.security.PasswordCredential; //Class representing a password credential
import javax.security.auth.Subject; //Class representing a subject
import javax.security.auth.callback.CallbackHandler; //Interface for a callback handler
import javax.security.auth.login.LoginContext; //Class representing a login context
import javax.security.auth.login.LoginException; //Used to handle errors related to Login Exceptions

import java.io.PrintWriter; //PrintWriter is used to write data to a character stream
import java.util.HashMap; //HashMap for storing key-value pairs
import java.util.Map; //Map interface for storing key-value pairs
import java.util.Set; //Set interface for representing unordered collections

Map<String, String> map = new HashMap<>(); //HashMap to store key-value pairs, used for specifying the authentication alias
map.put(Constants.MAPPING_ALIAS, ""REPLACE_WITH_YOUR_AUTH_ALIAS""); //Put the mapping alias into the map

CallbackHandler callbackHandler = null; //CallbackHandler to handle callbacks
try {
    callbackHandler = WSMappingCallbackHandlerFactory.getInstance().getCallbackHandler(map, null); //Get the callback handler instance
} catch (NotImplementedException e) { //Catch Not Implemented Exception and ignore it
}

LoginContext loginContext = null; //LoginContext for performing the login
try {
    loginContext = new LoginContext(""DefaultPrincipalMapping"", callbackHandler); //Create a new LoginContext instance
    loginContext.login(); //Perform the login
} catch (LoginException e) { //Catch any LoginExceptions
}

Subject subject = loginContext.getSubject(); //Get the subject from the login context
Set<PasswordCredential> credentials = subject.getPrivateCredentials(PasswordCredential.class); //Get the password credentials from the subject
PasswordCredential passwordCredential = credentials.iterator().next(); //Iterate over the credentials and get the first one

String user = passwordCredential.getUserName(); //Get the username from the password credential
String password = new String(passwordCredential.getPassword()); //Get the password from the password credential

response.setContentType(""text/html""); //Set the response content type to HTML
PrintWriter out = response.getWriter(); //Get the print writer from the response
out.println(""<h1>User: "" + user + "" --- Password: "" + password+""</h1>""); //Write the HTML output",4,4,4,4
,19020702,"import java.awt.BorderLayout;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class MovingABall extends JFrame {

    private JButton jbtLeft = new JButton(""Left"");
    private JButton jbtRight = new JButton(""Right"");
    private JButton jbtUp = new JButton(""Up"");
    private JButton jbtDown = new JButton(""Down"");
    private BallPanel ballPanel = new BallPanel();

    public MovingABall () {
        JPanel buttonPanel = new JPanel();

        buttonPanel.add(jbtLeft);
        buttonPanel.add(jbtRight);
        buttonPanel.add(jbtUp);
        buttonPanel.add(jbtDown);

        ballPanel.setBackground(Color.RED);
        this.add(ballPanel);
        this.add(buttonPanel, BorderLayout.SOUTH);
        jbtLeft.addActionListener(new ButtonListener());
        jbtRight.addActionListener(new ButtonListener());
        jbtUp.addActionListener(new ButtonListener());
        jbtDown.addActionListener(new ButtonListener());
    }

    public static void main(String[] args) {

        MovingABall mainWondow = new MovingABall();
        mainWondow.setTitle(""Moving a ball"");
        mainWondow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);




        mainWondow.pack();
        mainWondow.setVisible(true);
    }

    class ButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent buttonPressed) {
            if (buttonPressed.getSource() == jbtLeft)
                ballPanel.left();
            else if (buttonPressed.getSource() == jbtRight)
                ballPanel.right();
            else if (buttonPressed.getSource() == jbtUp)
                ballPanel.up();
            else if (buttonPressed.getSource() == jbtDown)
                ballPanel.down();
        }
    }

    class BallPanel extends JPanel {
        private int xCoord = -1;
        private int yCoord = -1;
        private Dimension preferredSize = new Dimension(300,200);

/*  Harmful to our logic..
        public BallPanel() {
            xCoord = getWidth()/2;
            yCoord = getHeight()/2;
            repaint();
        }
*/
/*  A good compiler would remove this..
        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);
        } */

        public void left() {
            xCoord-=5;
            repaint();
        }

        public void right() {
            xCoord+=5;
            repaint();
        }
        public void up() {
            yCoord-=5;
            repaint();
        }

        public void down() {
            yCoord+=5;
            repaint();
        }

        /** Suggest a size to the layout manager. */
        @Override
        public Dimension getPreferredSize() {
            return preferredSize;
        }

        protected void paintComponent(Graphics aBall) {
            super.paintComponent(aBall);



            if (xCoord<0 || yCoord<0) {
                xCoord = getWidth()/2;
                yCoord = getHeight()/2;
            }
            System.out.println(""X"" + getWidth());
            aBall.drawOval(xCoord, yCoord, 10, 10);
        }
    }
}
","import java.awt.BorderLayout;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class MovingABall extends JFrame {

    // Declaring the button objects
    private JButton jbtLeft = new JButton(""Left"");
    private JButton jbtRight = new JButton(""Right"");
    private JButton jbtUp = new JButton(""Up"");
    private JButton jbtDown = new JButton(""Down"");
    // Declaring and instantiating the BallPanel object
    private BallPanel ballPanel = new BallPanel();

    // Constructor of the MovingABall JFrame
    public MovingABall () {

        // Creating the JPanel for the buttons
        JPanel buttonPanel = new JPanel();

        // Adding the buttons to the JPanel
        buttonPanel.add(jbtLeft);
        buttonPanel.add(jbtRight);
        buttonPanel.add(jbtUp);
        buttonPanel.add(jbtDown);

        // Setting the background color of the BallPanel to red
        ballPanel.setBackground(Color.RED);
        // Adding the BallPanel and buttonPanel to the JFrame
        this.add(ballPanel);
        this.add(buttonPanel, BorderLayout.SOUTH);

        // Adding ActionListeners to the buttons
        jbtLeft.addActionListener(new ButtonListener());
        jbtRight.addActionListener(new ButtonListener());
        jbtUp.addActionListener(new ButtonListener());
        jbtDown.addActionListener(new ButtonListener());
    }

    // Main method
    public static void main(String[] args) {

        // Creating the main window object
        MovingABall mainWondow = new MovingABall();
        // Setting the Title for the window
        mainWondow.setTitle(""Moving a ball"");
        // Setting the defaultCloseOperation to close on window close
        mainWondow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Setting the size of the window according to the contents and making visible
        mainWondow.pack();
        mainWondow.setVisible(true);
    }

// Defining the ButtonListener class
    class ButtonListener implements ActionListener {

        // Defining the method to perform action on button clicks
        public void actionPerformed(ActionEvent buttonPressed) {

            // Conditional statements to decide which button is pressed and call the corresponding method of BallPanel
            if (buttonPressed.getSource() == jbtLeft)
                ballPanel.left();
            else if (buttonPressed.getSource() == jbtRight)
                ballPanel.right();
            else if (buttonPressed.getSource() == jbtUp)
                ballPanel.up();
            else if (buttonPressed.getSource() == jbtDown)
                ballPanel.down();
        }
    }

// Defining the BallPanel class which extends JPanel
    class BallPanel extends JPanel {

        // Variables representing X and Y coordinates of the ball
        private int xCoord = -1;
        private int yCoord = -1;
        // Setting the preferred size of the BallPanel
        private Dimension preferredSize = new Dimension(300,200);

        // Constructor of the BallPanel
        public BallPanel() {
            // Initializing the xCoord and yCoord to center of the panel
            xCoord = getWidth()/2;
            yCoord = getHeight()/2;
            // Calling repaint() on BallPanel so that the paintComponent() method gets called once
            repaint();
        }

        // Method to move the ball left by 5 pixels
        public void left() {
            xCoord-=5;
            // Calling repaint() on BallPanel so that the paintComponent() method gets called
            repaint();
        }

        // Method to move the ball left by 5 pixels
        public void right() {
            xCoord+=5;
            // Calling repaint() on BallPanel so that the paintComponent() method gets called
            repaint();
        }

        // Method to move the ball up by 5 pixels
        public void up() {
            yCoord-=5;
            // Calling repaint() on BallPanel so that the paintComponent() method gets called
            repaint();
        }

        // Method to move the ball down by 5 pixels
        public void down() {
            yCoord+=5;
            // Calling repaint() on BallPanel so that the paintComponent() method gets called
            repaint();
        }

        /** Suggested size to the layout manager. */
        @Override
        public Dimension getPreferredSize() {
            return preferredSize;
        }

        // paintComponent method for drawing the ball on the BallPanel
        protected void paintComponent(Graphics aBall) {
            super.paintComponent(aBall);

            // Checking if the ball coordinates are within the panel
            if (xCoord<0 || yCoord<0) {
                // Resetting the ball coordinates to the center if out of bounds
                xCoord = getWidth()/2;
                yCoord = getHeight()/2;
            }
            // Drawing the ball using Graphics object
            aBall.drawOval(xCoord, yCoord, 10, 10);
        }
    }
}",5,4,4,5
,23581446,"import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import javax.swing.*;

public final class TranslucentButtonIconTest {
  private static final TexturePaint TEXTURE = makeCheckerTexture();
  public JComponent makeUI() {
    JPanel p = new JPanel() {
      @Override protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setPaint(TEXTURE);
        g2.fillRect(0, 0, getWidth(), getHeight());
        g2.dispose();
      }
    };
    p.add(makeButton(""aaa""));
    p.add(makeButton(""bbbbbbb""));
    p.add(makeButton(""ccccccccccc""));
    p.add(makeButton(""ddddddddddddddddddddddddddddd""));
    return p;
  }
  private static AbstractButton makeButton(String title) {
    return new JButton(title) {
      @Override public void updateUI() {
        super.updateUI();
        setVerticalAlignment(SwingConstants.CENTER);
        setVerticalTextPosition(SwingConstants.CENTER);
        setHorizontalAlignment(SwingConstants.CENTER);
        setHorizontalTextPosition(SwingConstants.CENTER);
        setBorder(BorderFactory.createEmptyBorder(2, 8, 2, 8));
        setMargin(new Insets(2, 8, 2, 8));
        setContentAreaFilled(false);
        setFocusPainted(false);
        setOpaque(false);
        setForeground(Color.WHITE);
        setIcon(new TranslucentButtonIcon());
      }
    };
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new TranslucentButtonIconTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
  private static TexturePaint makeCheckerTexture() {
    int cs = 6;
    int sz = cs * cs;
    BufferedImage img = new BufferedImage(sz, sz, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2 = img.createGraphics();
    g2.setPaint(new Color(120, 120, 220));
    g2.fillRect(0, 0, sz, sz);
    g2.setPaint(new Color(200, 200, 200, 20));
    for (int i = 0; i * cs < sz; i++) {
      for (int j = 0; j * cs < sz; j++) {
        if ((i + j) % 2 == 0) {
          g2.fillRect(i * cs, j * cs, cs, cs);
        }
      }
    }
    g2.dispose();
    return new TexturePaint(img, new Rectangle(0, 0, sz, sz));
  }
}

class TranslucentButtonIcon implements Icon {
  private static final int R = 8;
  private int width;
  private int height;
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    if (c instanceof AbstractButton) {
      AbstractButton b = (AbstractButton) c;
      Insets i = b.getMargin();
      int w = c.getWidth();
      int h = c.getHeight();
      width  = w - i.left - i.right;
      height = h - i.top - i.bottom;
      Graphics2D g2 = (Graphics2D) g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      Shape area = new RoundRectangle2D.Float(x - i.left, y - i.top, w - 1, h - 1, R, R);
      Color color = new Color(0f, 0f, 0f, .3f);
      ButtonModel m = b.getModel();
      if (m.isPressed()) {
        color = new Color(0f, 0f, 0f, .3f);
      } else if (m.isRollover()) {
        color = new Color(1f, 1f, 1f, .3f);
      }
      g2.setPaint(color);
      g2.fill(area);
      g2.setPaint(Color.WHITE);
      g2.draw(area);
      g2.dispose();
    }
  }
  @Override public int getIconWidth()  {
    return Math.max(width, 100);
  }
  @Override public int getIconHeight() {
    return Math.max(height, 24);
  }
}
","import java.awt.*; // Import the awt library for abstract window toolkit
import java.awt.geom.*; // Import the awt.geom library for geometry
import java.awt.image.*; // Import the awt.image library for image processing
import javax.swing.*; // Import the javax.swing library for swing components

public final class TranslucentButtonIconTest {
private static final TexturePaint TEXTURE = makeCheckerTexture(); // Declare a static final TexturePaint called TEXTURE and initialize it to the makeCheckerTexture method

public JComponent makeUI() { // Define a method called makeUI that returns a JComponent
JPanel p = new JPanel() { // Create a new JPanel and store it in a variable called p
@Override protected void paintComponent(Graphics g) { // Override the paintComponent method of the JPanel class and provide a new implementation that takes a Graphics object as a parameter
super.paintComponent(g); // Call the superclass's paintComponent method to draw the component's background
Graphics2D g2 = (Graphics2D) g.create(); // Create a new Graphics2D object from the Graphics object and store it in a variable called g2
g2.setPaint(TEXTURE); // Set the paint of the Graphics2D object to the TEXTURE
g2.fillRect(0, 0, getWidth(), getHeight()); // Fill the entire JPanel with the TEXTURE
g2.dispose(); // Dispose the Graphics2D object
} // Close the paintComponent method
p.add(makeButton(""aaa"")); // Add a button with the text ""aaa"" to the JPanel
p.add(makeButton(""bbbbbbb"")); // Add a button with the text ""bbbbbbb"" to the JPanel
p.add(makeButton(""ccccccccccc"")); // Add a button with the text ""ccccccccccc"" to the JPanel
p.add(makeButton(""ddddddddddddddddddddddddddddd"")); // Add a button with the text ""ddddddddddddddddddddddddddddd"" to the JPanel
return p; // Return the JPanel
} // Close the makeUI method

private static AbstractButton makeButton(String title) { // Define a private static method called makeButton that takes a String as a parameter and returns an AbstractButton
return new JButton(title) { // Create a new JButton with the specified title and return it
@Override public void updateUI() { // Override the updateUI method of the AbstractButton class and provide a new implementation that does not take any parameters
super.updateUI(); // Call the superclass's updateUI method to apply the current Look and Feel
setVerticalAlignment(SwingConstants.CENTER); // Set the vertical alignment of the button's text to center
setVerticalTextPosition(SwingConstants.CENTER); // Set the vertical text position of the button's text to center
setHorizontalAlignment(SwingConstants.CENTER); // Set the horizontal alignment of the button's text to center
setHorizontalTextPosition(SwingConstants.CENTER); // Set the horizontal text position of the button's text to center
setBorder(BorderFactory.createEmptyBorder(2, 8, 2, 8)); // Set the border of the button to an empty border with 2 pixels of padding on the top, bottom, left, and right sides
setMargin(new Insets(2, 8, 2, 8)); // Set the margin of the button to 2 pixels on the top, bottom, left, and right sides
setContentAreaFilled(false); // Set the content area of the button to be not filled
setFocusPainted(false); // Set the focus border of the button to not be painted
setOpaque(false); // Set the opaque property of the button to be false
setForeground(Color.WHITE); // Set the foreground color of the button's text to white
setIcon(new TranslucentButtonIcon()); // Set the icon of the button to a new TranslucentButtonIcon
} // Close the updateUI method
}; // Close the makeButton method

public static void main(String[] args) { // Define a static main method that takes a String array as a parameter and does not return any value
EventQueue.invokeLater(new Runnable() { // Run the following code in the event dispatch thread
@Override public void run() { // Override the run method of the Runnable interface and provide a new implementation that does not take any parameters
createAndShowGUI(); // Call the createAndShowGUI method to create and show the GUI
} // Close the run method
}); // Close the Runnable object and pass it to the EventQueue
} // Close the main method

public static void createAndShowGUI() { // Define a public static method called createAndShowGUI that does not take any parameters and does not return any value
JFrame f = new JFrame(); // Create a new JFrame and store it in a variable called f
f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // Set the default close operation of the JFrame to exit the application when the close button is clicked
f.getContentPane().add(new TranslucentButtonIconTest().makeUI()); // Add the user interface to the content pane of the JFrame
f.setSize(320, 240); // Set the size of the JFrame to 320 pixels in width and 240 pixels in height
f.setLocationRelativeTo(null); // Set the location of the JFrame to be relative to the center of the screen
f.setVisible(true); // Set the visibility of the JFrame to true
} // Close the createAndShowGUI method

private static TexturePaint makeCheckerTexture() { // Define a private static method called makeCheckerTexture that does not take any parameters and returns a TexturePaint
int cs = 6; // Define an integer variable called cs and set it to 6
int sz = cs * cs; // Define an integer variable called sz and set it to the square of cs
BufferedImage img = new BufferedImage(sz, sz, BufferedImage.TYPE_INT_ARGB); // Create a new BufferedImage with a width of sz, a height of sz, and a type of BufferedImage.TYPE_INT_ARGB and store it in a variable called img
Graphics2D g2 = img.createGraphics(); // Create a new Graphics2D object from the BufferedImage and store it in a variable called g2
g2.setPaint(new Color(120, 120, 220)); // Set the paint of the Graphics2D object to a new Color with RGB values of 120, 120, and 220
g2.fillRect(0, 0, sz, sz); // Fill the entire BufferedImage with the Color
g2.setPaint(new Color(200, 200, 200, 20)); // Set the paint of the Graphics2D object to a new Color with RGB values of 200, 200, 200, and an alpha",5,5,4,5
